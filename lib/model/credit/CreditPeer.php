<?php


/**
 * Skeleton subclass for performing query and update operations on the 'credit' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Feb 20 16:26:33 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.credit
 */
class CreditPeer extends BaseCreditPeer {

  /**
   * Options status
   * 
   * @var array
   */
  public static $status = array(
      'current' => 'Currents',
      'in_request' => 'In request',
      'approved' => 'Approved',
      'annulled' => 'Annulled',
      'paid' => 'Paid',
  );

  /**
   * Return the number of current credits
   * 
   * @return int
   */
  public static function doCountCurrent()
  {
    return self::doCountByStatus(Credit::STATUS_CURRENT);
  }
  
  /**
   * Return the number of in request credits
   * 
   * @return int 
   */
  public static function doCountInRequest()
  {
    return self::doCountByStatus(Credit::STATUS_IN_REQUEST);
  }
  
  /**
   * Return the number of approved credits
   * 
   * @return int 
   */
  public static function doCountApproved()
  {
    return self::doCountByStatus(Credit::STATUS_APPROVED);
  }
  
  /**
   * Return the number of annulled credits
   * 
   * @return int 
   */
  public static function doCountAnnulled()
  {
    return self::doCountByStatus(Credit::STATUS_ANNULLED);
  }
  
  /**
   * Return the number of paid credits
   * 
   * @return int 
   */
  public static function doCountPaid()
  {  
    return self::doCountByStatus(Credit::STATUS_PAID);
  }
  
  /**
   * Do select credits expired
   * 
   * @return array
   */
  public static function doSelectExpired()
  {
    return self::doSelect(self::addCriteriaExpired());
  } 
  
  /**
   * Do count credits expired
   * 
   * @return int 
   */
  public static function doCountExpired()
  {
    return self::doCount(self::addCriteriaExpired());
  }
  
  /**
   * Return the number credits by status column
   * 
   * @param string $status status credit 
   * @return int 
   */
  public static function doCountByStatus($status)
  {
    $criteria = new Criteria();

    $criteria->add(self::STATUS, $status, Criteria::EQUAL);
    
    return self::doCount($criteria);
  }
  
  /**
   * Retrieve for select
   * 
   * @param string $q
   * @param int $limit
   * @return array object(Account) 
   */
  public static function retrieveForSelect($q, $limit)
  {
    $criteria = new Criteria();
    $criteria->add(self::ID, '%'.$q.'%', Criteria::LIKE);
    $criteria->addAscendingOrderByColumn(self::ID);
    $criteria->setLimit($limit);
 
    $credits = array();
    foreach (self::doSelect($criteria) as $credit)
    {
      $credits[$credit->getId()] = (string) $credit;
    }
 
    return $credits;
  }
  
  /**
   * Add criteria credit expired
   * 
   * @return Criteria 
   */
  public static function addCriteriaExpired()
  {
    $now = mktime(0, 0, 0, date("m"), date("d"), date("Y"));
    
    $criteria = new Criteria();
    $criteria->addJoin(self::ID, PaymentPeer::CREDIT_ID);
    $criteria->add(self::STATUS, Credit::STATUS_CURRENT, Criteria::EQUAL);
    $criteria->add(PaymentPeer::STATUS, Payment::STATUS_UNPAID, Criteria::EQUAL);
    $criteria->add(PaymentPeer::DATE, $now, Criteria::LESS_EQUAL);
    $criteria->setDistinct();
 
    return $criteria;
  }
} // CreditPeer
