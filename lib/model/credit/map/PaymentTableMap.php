<?php


/**
 * This class defines the structure of the 'payment' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Jan  8 23:27:29 2013
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.credit.map
 */
class PaymentTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.credit.map.PaymentTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('payment');
		$this->setPhpName('Payment');
		$this->setClassname('Payment');
		$this->setPackage('lib.model.credit');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'BIGINT', true, null, null);
		$this->addForeignKey('CREDIT_ID', 'CreditId', 'BIGINT', 'credit', 'ID', true, null, null);
		$this->addForeignKey('TRANSACTION_ID', 'TransactionId', 'BIGINT', 'transaction', 'ID', false, null, null);
		$this->addColumn('NUMBER', 'Number', 'INTEGER', true, null, null);
		$this->addColumn('DATE', 'Date', 'DATE', true, null, null);
		$this->addColumn('BALANCE', 'Balance', 'DECIMAL', true, 18, null);
		$this->addColumn('CAPITAL', 'Capital', 'DECIMAL', true, 18, null);
		$this->addColumn('INTEREST', 'Interest', 'DECIMAL', true, 18, null);
		$this->addColumn('STATUS', 'Status', 'VARCHAR', true, 30, null);
		$this->addColumn('DAYS_IN_ARREAR', 'DaysInArrear', 'INTEGER', false, null, null);
		$this->addColumn('ARREAR', 'Arrear', 'DECIMAL', false, 8, null);
		$this->addColumn('DISCOUNT', 'Discount', 'DECIMAL', false, 8, null);
		$this->addColumn('PAID_AT', 'PaidAt', 'TIMESTAMP', false, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Credit', 'Credit', RelationMap::MANY_TO_ONE, array('credit_id' => 'id', ), 'CASCADE', 'RESTRICT');
    $this->addRelation('Transaction', 'Transaction', RelationMap::MANY_TO_ONE, array('transaction_id' => 'id', ), 'CASCADE', 'RESTRICT');
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // PaymentTableMap
