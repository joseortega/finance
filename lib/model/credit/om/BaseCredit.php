<?php

/**
 * Base class that represents a row from the 'credit' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Jan  8 23:27:29 2013
 *
 * @package    lib.model.credit.om
 */
abstract class BaseCredit extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CreditPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the product_id field.
	 * @var        string
	 */
	protected $product_id;

	/**
	 * The value for the associate_id field.
	 * @var        string
	 */
	protected $associate_id;

	/**
	 * The value for the account_id field.
	 * @var        string
	 */
	protected $account_id;

	/**
	 * The value for the amount field.
	 * @var        string
	 */
	protected $amount;

	/**
	 * The value for the balance field.
	 * @var        string
	 */
	protected $balance;

	/**
	 * The value for the time_in_months field.
	 * @var        int
	 */
	protected $time_in_months;

	/**
	 * The value for the pay_frequency_in_months field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $pay_frequency_in_months;

	/**
	 * The value for the amortization_type field.
	 * @var        string
	 */
	protected $amortization_type;

	/**
	 * The value for the purpose field.
	 * @var        string
	 */
	protected $purpose;

	/**
	 * The value for the interest_rate field.
	 * @var        string
	 */
	protected $interest_rate;

	/**
	 * The value for the status field.
	 * Note: this column has a database default value of: 'in_request'
	 * @var        string
	 */
	protected $status;

	/**
	 * The value for the issued_at field.
	 * @var        string
	 */
	protected $issued_at;

	/**
	 * The value for the disbursed_at field.
	 * @var        string
	 */
	protected $disbursed_at;

	/**
	 * The value for the annulled_at field.
	 * @var        string
	 */
	protected $annulled_at;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        CreditProduct
	 */
	protected $aProduct;

	/**
	 * @var        Associate
	 */
	protected $aAssociate;

	/**
	 * @var        Account
	 */
	protected $aAccount;

	/**
	 * @var        array Transaction[] Collection to store aggregation of Transaction objects.
	 */
	protected $collTransactions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransactions.
	 */
	private $lastTransactionCriteria = null;

	/**
	 * @var        array CommitteeMember[] Collection to store aggregation of CommitteeMember objects.
	 */
	protected $collCommitteeMembers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCommitteeMembers.
	 */
	private $lastCommitteeMemberCriteria = null;

	/**
	 * @var        array Payment[] Collection to store aggregation of Payment objects.
	 */
	protected $collPayments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPayments.
	 */
	private $lastPaymentCriteria = null;

	/**
	 * @var        array GuaranteePersonal[] Collection to store aggregation of GuaranteePersonal objects.
	 */
	protected $collGuaranteePersonals;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGuaranteePersonals.
	 */
	private $lastGuaranteePersonalCriteria = null;

	/**
	 * @var        array GuaranteeReal[] Collection to store aggregation of GuaranteeReal objects.
	 */
	protected $collGuaranteeReals;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGuaranteeReals.
	 */
	private $lastGuaranteeRealCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'CreditPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->pay_frequency_in_months = 1;
		$this->status = 'in_request';
	}

	/**
	 * Initializes internal state of BaseCredit object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [product_id] column value.
	 * 
	 * @return     string
	 */
	public function getProductId()
	{
		return $this->product_id;
	}

	/**
	 * Get the [associate_id] column value.
	 * 
	 * @return     string
	 */
	public function getAssociateId()
	{
		return $this->associate_id;
	}

	/**
	 * Get the [account_id] column value.
	 * 
	 * @return     string
	 */
	public function getAccountId()
	{
		return $this->account_id;
	}

	/**
	 * Get the [amount] column value.
	 * 
	 * @return     string
	 */
	public function getAmount()
	{
		return $this->amount;
	}

	/**
	 * Get the [balance] column value.
	 * 
	 * @return     string
	 */
	public function getBalance()
	{
		return $this->balance;
	}

	/**
	 * Get the [time_in_months] column value.
	 * 
	 * @return     int
	 */
	public function getTimeInMonths()
	{
		return $this->time_in_months;
	}

	/**
	 * Get the [pay_frequency_in_months] column value.
	 * 
	 * @return     int
	 */
	public function getPayFrequencyInMonths()
	{
		return $this->pay_frequency_in_months;
	}

	/**
	 * Get the [amortization_type] column value.
	 * 
	 * @return     string
	 */
	public function getAmortizationType()
	{
		return $this->amortization_type;
	}

	/**
	 * Get the [purpose] column value.
	 * 
	 * @return     string
	 */
	public function getPurpose()
	{
		return $this->purpose;
	}

	/**
	 * Get the [interest_rate] column value.
	 * 
	 * @return     string
	 */
	public function getInterestRate()
	{
		return $this->interest_rate;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     string
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [optionally formatted] temporal [issued_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getIssuedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->issued_at === null) {
			return null;
		}


		if ($this->issued_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->issued_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->issued_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [disbursed_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDisbursedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->disbursed_at === null) {
			return null;
		}


		if ($this->disbursed_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->disbursed_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->disbursed_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [annulled_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getAnnulledAt($format = 'Y-m-d H:i:s')
	{
		if ($this->annulled_at === null) {
			return null;
		}


		if ($this->annulled_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->annulled_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->annulled_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = CreditPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [product_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setProductId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->product_id !== $v) {
			$this->product_id = $v;
			$this->modifiedColumns[] = CreditPeer::PRODUCT_ID;
		}

		if ($this->aProduct !== null && $this->aProduct->getId() !== $v) {
			$this->aProduct = null;
		}

		return $this;
	} // setProductId()

	/**
	 * Set the value of [associate_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setAssociateId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->associate_id !== $v) {
			$this->associate_id = $v;
			$this->modifiedColumns[] = CreditPeer::ASSOCIATE_ID;
		}

		if ($this->aAssociate !== null && $this->aAssociate->getId() !== $v) {
			$this->aAssociate = null;
		}

		return $this;
	} // setAssociateId()

	/**
	 * Set the value of [account_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setAccountId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->account_id !== $v) {
			$this->account_id = $v;
			$this->modifiedColumns[] = CreditPeer::ACCOUNT_ID;
		}

		if ($this->aAccount !== null && $this->aAccount->getId() !== $v) {
			$this->aAccount = null;
		}

		return $this;
	} // setAccountId()

	/**
	 * Set the value of [amount] column.
	 * 
	 * @param      string $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setAmount($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->amount !== $v) {
			$this->amount = $v;
			$this->modifiedColumns[] = CreditPeer::AMOUNT;
		}

		return $this;
	} // setAmount()

	/**
	 * Set the value of [balance] column.
	 * 
	 * @param      string $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setBalance($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->balance !== $v) {
			$this->balance = $v;
			$this->modifiedColumns[] = CreditPeer::BALANCE;
		}

		return $this;
	} // setBalance()

	/**
	 * Set the value of [time_in_months] column.
	 * 
	 * @param      int $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setTimeInMonths($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->time_in_months !== $v) {
			$this->time_in_months = $v;
			$this->modifiedColumns[] = CreditPeer::TIME_IN_MONTHS;
		}

		return $this;
	} // setTimeInMonths()

	/**
	 * Set the value of [pay_frequency_in_months] column.
	 * 
	 * @param      int $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setPayFrequencyInMonths($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pay_frequency_in_months !== $v || $this->isNew()) {
			$this->pay_frequency_in_months = $v;
			$this->modifiedColumns[] = CreditPeer::PAY_FREQUENCY_IN_MONTHS;
		}

		return $this;
	} // setPayFrequencyInMonths()

	/**
	 * Set the value of [amortization_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setAmortizationType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->amortization_type !== $v) {
			$this->amortization_type = $v;
			$this->modifiedColumns[] = CreditPeer::AMORTIZATION_TYPE;
		}

		return $this;
	} // setAmortizationType()

	/**
	 * Set the value of [purpose] column.
	 * 
	 * @param      string $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setPurpose($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->purpose !== $v) {
			$this->purpose = $v;
			$this->modifiedColumns[] = CreditPeer::PURPOSE;
		}

		return $this;
	} // setPurpose()

	/**
	 * Set the value of [interest_rate] column.
	 * 
	 * @param      string $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setInterestRate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->interest_rate !== $v) {
			$this->interest_rate = $v;
			$this->modifiedColumns[] = CreditPeer::INTEREST_RATE;
		}

		return $this;
	} // setInterestRate()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      string $v new value
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status !== $v || $this->isNew()) {
			$this->status = $v;
			$this->modifiedColumns[] = CreditPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Sets the value of [issued_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setIssuedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->issued_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->issued_at !== null && $tmpDt = new DateTime($this->issued_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->issued_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CreditPeer::ISSUED_AT;
			}
		} // if either are not null

		return $this;
	} // setIssuedAt()

	/**
	 * Sets the value of [disbursed_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setDisbursedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->disbursed_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->disbursed_at !== null && $tmpDt = new DateTime($this->disbursed_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->disbursed_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CreditPeer::DISBURSED_AT;
			}
		} // if either are not null

		return $this;
	} // setDisbursedAt()

	/**
	 * Sets the value of [annulled_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setAnnulledAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->annulled_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->annulled_at !== null && $tmpDt = new DateTime($this->annulled_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->annulled_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CreditPeer::ANNULLED_AT;
			}
		} // if either are not null

		return $this;
	} // setAnnulledAt()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CreditPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Credit The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CreditPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->pay_frequency_in_months !== 1) {
				return false;
			}

			if ($this->status !== 'in_request') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->product_id = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->associate_id = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->account_id = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->amount = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->balance = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->time_in_months = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->pay_frequency_in_months = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->amortization_type = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->purpose = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->interest_rate = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->status = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->issued_at = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->disbursed_at = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->annulled_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->created_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->updated_at = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 17; // 17 = CreditPeer::NUM_COLUMNS - CreditPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Credit object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProduct !== null && $this->product_id !== $this->aProduct->getId()) {
			$this->aProduct = null;
		}
		if ($this->aAssociate !== null && $this->associate_id !== $this->aAssociate->getId()) {
			$this->aAssociate = null;
		}
		if ($this->aAccount !== null && $this->account_id !== $this->aAccount->getId()) {
			$this->aAccount = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CreditPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CreditPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aProduct = null;
			$this->aAssociate = null;
			$this->aAccount = null;
			$this->collTransactions = null;
			$this->lastTransactionCriteria = null;

			$this->collCommitteeMembers = null;
			$this->lastCommitteeMemberCriteria = null;

			$this->collPayments = null;
			$this->lastPaymentCriteria = null;

			$this->collGuaranteePersonals = null;
			$this->lastGuaranteePersonalCriteria = null;

			$this->collGuaranteeReals = null;
			$this->lastGuaranteeRealCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CreditPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCredit:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				CreditPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCredit:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CreditPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCredit:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(CreditPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(CreditPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCredit:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				CreditPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProduct !== null) {
				if ($this->aProduct->isModified() || $this->aProduct->isNew()) {
					$affectedRows += $this->aProduct->save($con);
				}
				$this->setProduct($this->aProduct);
			}

			if ($this->aAssociate !== null) {
				if ($this->aAssociate->isModified() || $this->aAssociate->isNew()) {
					$affectedRows += $this->aAssociate->save($con);
				}
				$this->setAssociate($this->aAssociate);
			}

			if ($this->aAccount !== null) {
				if ($this->aAccount->isModified() || $this->aAccount->isNew()) {
					$affectedRows += $this->aAccount->save($con);
				}
				$this->setAccount($this->aAccount);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CreditPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CreditPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CreditPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTransactions !== null) {
				foreach ($this->collTransactions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCommitteeMembers !== null) {
				foreach ($this->collCommitteeMembers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPayments !== null) {
				foreach ($this->collPayments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGuaranteePersonals !== null) {
				foreach ($this->collGuaranteePersonals as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGuaranteeReals !== null) {
				foreach ($this->collGuaranteeReals as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProduct !== null) {
				if (!$this->aProduct->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProduct->getValidationFailures());
				}
			}

			if ($this->aAssociate !== null) {
				if (!$this->aAssociate->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAssociate->getValidationFailures());
				}
			}

			if ($this->aAccount !== null) {
				if (!$this->aAccount->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAccount->getValidationFailures());
				}
			}


			if (($retval = CreditPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTransactions !== null) {
					foreach ($this->collTransactions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCommitteeMembers !== null) {
					foreach ($this->collCommitteeMembers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPayments !== null) {
					foreach ($this->collPayments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGuaranteePersonals !== null) {
					foreach ($this->collGuaranteePersonals as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGuaranteeReals !== null) {
					foreach ($this->collGuaranteeReals as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CreditPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getProductId();
				break;
			case 2:
				return $this->getAssociateId();
				break;
			case 3:
				return $this->getAccountId();
				break;
			case 4:
				return $this->getAmount();
				break;
			case 5:
				return $this->getBalance();
				break;
			case 6:
				return $this->getTimeInMonths();
				break;
			case 7:
				return $this->getPayFrequencyInMonths();
				break;
			case 8:
				return $this->getAmortizationType();
				break;
			case 9:
				return $this->getPurpose();
				break;
			case 10:
				return $this->getInterestRate();
				break;
			case 11:
				return $this->getStatus();
				break;
			case 12:
				return $this->getIssuedAt();
				break;
			case 13:
				return $this->getDisbursedAt();
				break;
			case 14:
				return $this->getAnnulledAt();
				break;
			case 15:
				return $this->getCreatedAt();
				break;
			case 16:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CreditPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getProductId(),
			$keys[2] => $this->getAssociateId(),
			$keys[3] => $this->getAccountId(),
			$keys[4] => $this->getAmount(),
			$keys[5] => $this->getBalance(),
			$keys[6] => $this->getTimeInMonths(),
			$keys[7] => $this->getPayFrequencyInMonths(),
			$keys[8] => $this->getAmortizationType(),
			$keys[9] => $this->getPurpose(),
			$keys[10] => $this->getInterestRate(),
			$keys[11] => $this->getStatus(),
			$keys[12] => $this->getIssuedAt(),
			$keys[13] => $this->getDisbursedAt(),
			$keys[14] => $this->getAnnulledAt(),
			$keys[15] => $this->getCreatedAt(),
			$keys[16] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CreditPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setProductId($value);
				break;
			case 2:
				$this->setAssociateId($value);
				break;
			case 3:
				$this->setAccountId($value);
				break;
			case 4:
				$this->setAmount($value);
				break;
			case 5:
				$this->setBalance($value);
				break;
			case 6:
				$this->setTimeInMonths($value);
				break;
			case 7:
				$this->setPayFrequencyInMonths($value);
				break;
			case 8:
				$this->setAmortizationType($value);
				break;
			case 9:
				$this->setPurpose($value);
				break;
			case 10:
				$this->setInterestRate($value);
				break;
			case 11:
				$this->setStatus($value);
				break;
			case 12:
				$this->setIssuedAt($value);
				break;
			case 13:
				$this->setDisbursedAt($value);
				break;
			case 14:
				$this->setAnnulledAt($value);
				break;
			case 15:
				$this->setCreatedAt($value);
				break;
			case 16:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CreditPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setProductId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAssociateId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setAccountId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAmount($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setBalance($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTimeInMonths($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPayFrequencyInMonths($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAmortizationType($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPurpose($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setInterestRate($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setStatus($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setIssuedAt($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDisbursedAt($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setAnnulledAt($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCreatedAt($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setUpdatedAt($arr[$keys[16]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CreditPeer::DATABASE_NAME);

		if ($this->isColumnModified(CreditPeer::ID)) $criteria->add(CreditPeer::ID, $this->id);
		if ($this->isColumnModified(CreditPeer::PRODUCT_ID)) $criteria->add(CreditPeer::PRODUCT_ID, $this->product_id);
		if ($this->isColumnModified(CreditPeer::ASSOCIATE_ID)) $criteria->add(CreditPeer::ASSOCIATE_ID, $this->associate_id);
		if ($this->isColumnModified(CreditPeer::ACCOUNT_ID)) $criteria->add(CreditPeer::ACCOUNT_ID, $this->account_id);
		if ($this->isColumnModified(CreditPeer::AMOUNT)) $criteria->add(CreditPeer::AMOUNT, $this->amount);
		if ($this->isColumnModified(CreditPeer::BALANCE)) $criteria->add(CreditPeer::BALANCE, $this->balance);
		if ($this->isColumnModified(CreditPeer::TIME_IN_MONTHS)) $criteria->add(CreditPeer::TIME_IN_MONTHS, $this->time_in_months);
		if ($this->isColumnModified(CreditPeer::PAY_FREQUENCY_IN_MONTHS)) $criteria->add(CreditPeer::PAY_FREQUENCY_IN_MONTHS, $this->pay_frequency_in_months);
		if ($this->isColumnModified(CreditPeer::AMORTIZATION_TYPE)) $criteria->add(CreditPeer::AMORTIZATION_TYPE, $this->amortization_type);
		if ($this->isColumnModified(CreditPeer::PURPOSE)) $criteria->add(CreditPeer::PURPOSE, $this->purpose);
		if ($this->isColumnModified(CreditPeer::INTEREST_RATE)) $criteria->add(CreditPeer::INTEREST_RATE, $this->interest_rate);
		if ($this->isColumnModified(CreditPeer::STATUS)) $criteria->add(CreditPeer::STATUS, $this->status);
		if ($this->isColumnModified(CreditPeer::ISSUED_AT)) $criteria->add(CreditPeer::ISSUED_AT, $this->issued_at);
		if ($this->isColumnModified(CreditPeer::DISBURSED_AT)) $criteria->add(CreditPeer::DISBURSED_AT, $this->disbursed_at);
		if ($this->isColumnModified(CreditPeer::ANNULLED_AT)) $criteria->add(CreditPeer::ANNULLED_AT, $this->annulled_at);
		if ($this->isColumnModified(CreditPeer::CREATED_AT)) $criteria->add(CreditPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(CreditPeer::UPDATED_AT)) $criteria->add(CreditPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CreditPeer::DATABASE_NAME);

		$criteria->add(CreditPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Credit (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setProductId($this->product_id);

		$copyObj->setAssociateId($this->associate_id);

		$copyObj->setAccountId($this->account_id);

		$copyObj->setAmount($this->amount);

		$copyObj->setBalance($this->balance);

		$copyObj->setTimeInMonths($this->time_in_months);

		$copyObj->setPayFrequencyInMonths($this->pay_frequency_in_months);

		$copyObj->setAmortizationType($this->amortization_type);

		$copyObj->setPurpose($this->purpose);

		$copyObj->setInterestRate($this->interest_rate);

		$copyObj->setStatus($this->status);

		$copyObj->setIssuedAt($this->issued_at);

		$copyObj->setDisbursedAt($this->disbursed_at);

		$copyObj->setAnnulledAt($this->annulled_at);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getTransactions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransaction($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCommitteeMembers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCommitteeMember($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPayments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPayment($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGuaranteePersonals() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGuaranteePersonal($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGuaranteeReals() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGuaranteeReal($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Credit Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CreditPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CreditPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a CreditProduct object.
	 *
	 * @param      CreditProduct $v
	 * @return     Credit The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProduct(CreditProduct $v = null)
	{
		if ($v === null) {
			$this->setProductId(NULL);
		} else {
			$this->setProductId($v->getId());
		}

		$this->aProduct = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CreditProduct object, it will not be re-added.
		if ($v !== null) {
			$v->addCredit($this);
		}

		return $this;
	}


	/**
	 * Get the associated CreditProduct object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CreditProduct The associated CreditProduct object.
	 * @throws     PropelException
	 */
	public function getProduct(PropelPDO $con = null)
	{
		if ($this->aProduct === null && (($this->product_id !== "" && $this->product_id !== null))) {
			$this->aProduct = CreditProductPeer::retrieveByPk($this->product_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProduct->addCredits($this);
			 */
		}
		return $this->aProduct;
	}

	/**
	 * Declares an association between this object and a Associate object.
	 *
	 * @param      Associate $v
	 * @return     Credit The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAssociate(Associate $v = null)
	{
		if ($v === null) {
			$this->setAssociateId(NULL);
		} else {
			$this->setAssociateId($v->getId());
		}

		$this->aAssociate = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Associate object, it will not be re-added.
		if ($v !== null) {
			$v->addCredit($this);
		}

		return $this;
	}


	/**
	 * Get the associated Associate object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Associate The associated Associate object.
	 * @throws     PropelException
	 */
	public function getAssociate(PropelPDO $con = null)
	{
		if ($this->aAssociate === null && (($this->associate_id !== "" && $this->associate_id !== null))) {
			$this->aAssociate = AssociatePeer::retrieveByPk($this->associate_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAssociate->addCredits($this);
			 */
		}
		return $this->aAssociate;
	}

	/**
	 * Declares an association between this object and a Account object.
	 *
	 * @param      Account $v
	 * @return     Credit The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAccount(Account $v = null)
	{
		if ($v === null) {
			$this->setAccountId(NULL);
		} else {
			$this->setAccountId($v->getId());
		}

		$this->aAccount = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Account object, it will not be re-added.
		if ($v !== null) {
			$v->addCredit($this);
		}

		return $this;
	}


	/**
	 * Get the associated Account object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Account The associated Account object.
	 * @throws     PropelException
	 */
	public function getAccount(PropelPDO $con = null)
	{
		if ($this->aAccount === null && (($this->account_id !== "" && $this->account_id !== null))) {
			$this->aAccount = AccountPeer::retrieveByPk($this->account_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAccount->addCredits($this);
			 */
		}
		return $this->aAccount;
	}

	/**
	 * Clears out the collTransactions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransactions()
	 */
	public function clearTransactions()
	{
		$this->collTransactions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransactions collection (array).
	 *
	 * By default this just sets the collTransactions collection to an empty array (like clearcollTransactions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransactions()
	{
		$this->collTransactions = array();
	}

	/**
	 * Gets an array of Transaction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Credit has previously been saved, it will retrieve
	 * related Transactions from storage. If this Credit is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Transaction[]
	 * @throws     PropelException
	 */
	public function getTransactions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
			   $this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

				TransactionPeer::addSelectColumns($criteria);
				$this->collTransactions = TransactionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

				TransactionPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
					$this->collTransactions = TransactionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransactionCriteria = $criteria;
		return $this->collTransactions;
	}

	/**
	 * Returns the number of related Transaction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Transaction objects.
	 * @throws     PropelException
	 */
	public function countTransactions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

				$count = TransactionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

				if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
					$count = TransactionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTransactions);
				}
			} else {
				$count = count($this->collTransactions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Transaction object to this object
	 * through the Transaction foreign key attribute.
	 *
	 * @param      Transaction $l Transaction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransaction(Transaction $l)
	{
		if ($this->collTransactions === null) {
			$this->initTransactions();
		}
		if (!in_array($l, $this->collTransactions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransactions, $l);
			$l->setCredit($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Credit is new, it will return
	 * an empty collection; or if this Credit has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Credit.
	 */
	public function getTransactionsJoinCash($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinCash($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinCash($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Credit is new, it will return
	 * an empty collection; or if this Credit has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Credit.
	 */
	public function getTransactionsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Credit is new, it will return
	 * an empty collection; or if this Credit has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Credit.
	 */
	public function getTransactionsJoinTransactionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinTransactionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinTransactionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Credit is new, it will return
	 * an empty collection; or if this Credit has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Credit.
	 */
	public function getTransactionsJoinAccount($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinAccount($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinAccount($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Credit is new, it will return
	 * an empty collection; or if this Credit has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Credit.
	 */
	public function getTransactionsJoinBankbook($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinBankbook($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinBankbook($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Credit is new, it will return
	 * an empty collection; or if this Credit has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Credit.
	 */
	public function getTransactionsJoinInvestment($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinInvestment($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::CREDIT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinInvestment($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}

	/**
	 * Clears out the collCommitteeMembers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCommitteeMembers()
	 */
	public function clearCommitteeMembers()
	{
		$this->collCommitteeMembers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCommitteeMembers collection (array).
	 *
	 * By default this just sets the collCommitteeMembers collection to an empty array (like clearcollCommitteeMembers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCommitteeMembers()
	{
		$this->collCommitteeMembers = array();
	}

	/**
	 * Gets an array of CommitteeMember objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Credit has previously been saved, it will retrieve
	 * related CommitteeMembers from storage. If this Credit is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CommitteeMember[]
	 * @throws     PropelException
	 */
	public function getCommitteeMembers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCommitteeMembers === null) {
			if ($this->isNew()) {
			   $this->collCommitteeMembers = array();
			} else {

				$criteria->add(CommitteeMemberPeer::CREDIT_ID, $this->id);

				CommitteeMemberPeer::addSelectColumns($criteria);
				$this->collCommitteeMembers = CommitteeMemberPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CommitteeMemberPeer::CREDIT_ID, $this->id);

				CommitteeMemberPeer::addSelectColumns($criteria);
				if (!isset($this->lastCommitteeMemberCriteria) || !$this->lastCommitteeMemberCriteria->equals($criteria)) {
					$this->collCommitteeMembers = CommitteeMemberPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCommitteeMemberCriteria = $criteria;
		return $this->collCommitteeMembers;
	}

	/**
	 * Returns the number of related CommitteeMember objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CommitteeMember objects.
	 * @throws     PropelException
	 */
	public function countCommitteeMembers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCommitteeMembers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CommitteeMemberPeer::CREDIT_ID, $this->id);

				$count = CommitteeMemberPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CommitteeMemberPeer::CREDIT_ID, $this->id);

				if (!isset($this->lastCommitteeMemberCriteria) || !$this->lastCommitteeMemberCriteria->equals($criteria)) {
					$count = CommitteeMemberPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCommitteeMembers);
				}
			} else {
				$count = count($this->collCommitteeMembers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CommitteeMember object to this object
	 * through the CommitteeMember foreign key attribute.
	 *
	 * @param      CommitteeMember $l CommitteeMember
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCommitteeMember(CommitteeMember $l)
	{
		if ($this->collCommitteeMembers === null) {
			$this->initCommitteeMembers();
		}
		if (!in_array($l, $this->collCommitteeMembers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCommitteeMembers, $l);
			$l->setCredit($this);
		}
	}

	/**
	 * Clears out the collPayments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPayments()
	 */
	public function clearPayments()
	{
		$this->collPayments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPayments collection (array).
	 *
	 * By default this just sets the collPayments collection to an empty array (like clearcollPayments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPayments()
	{
		$this->collPayments = array();
	}

	/**
	 * Gets an array of Payment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Credit has previously been saved, it will retrieve
	 * related Payments from storage. If this Credit is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Payment[]
	 * @throws     PropelException
	 */
	public function getPayments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPayments === null) {
			if ($this->isNew()) {
			   $this->collPayments = array();
			} else {

				$criteria->add(PaymentPeer::CREDIT_ID, $this->id);

				PaymentPeer::addSelectColumns($criteria);
				$this->collPayments = PaymentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PaymentPeer::CREDIT_ID, $this->id);

				PaymentPeer::addSelectColumns($criteria);
				if (!isset($this->lastPaymentCriteria) || !$this->lastPaymentCriteria->equals($criteria)) {
					$this->collPayments = PaymentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPaymentCriteria = $criteria;
		return $this->collPayments;
	}

	/**
	 * Returns the number of related Payment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Payment objects.
	 * @throws     PropelException
	 */
	public function countPayments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPayments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PaymentPeer::CREDIT_ID, $this->id);

				$count = PaymentPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PaymentPeer::CREDIT_ID, $this->id);

				if (!isset($this->lastPaymentCriteria) || !$this->lastPaymentCriteria->equals($criteria)) {
					$count = PaymentPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPayments);
				}
			} else {
				$count = count($this->collPayments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Payment object to this object
	 * through the Payment foreign key attribute.
	 *
	 * @param      Payment $l Payment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPayment(Payment $l)
	{
		if ($this->collPayments === null) {
			$this->initPayments();
		}
		if (!in_array($l, $this->collPayments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPayments, $l);
			$l->setCredit($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Credit is new, it will return
	 * an empty collection; or if this Credit has previously
	 * been saved, it will retrieve related Payments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Credit.
	 */
	public function getPaymentsJoinTransaction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPayments === null) {
			if ($this->isNew()) {
				$this->collPayments = array();
			} else {

				$criteria->add(PaymentPeer::CREDIT_ID, $this->id);

				$this->collPayments = PaymentPeer::doSelectJoinTransaction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PaymentPeer::CREDIT_ID, $this->id);

			if (!isset($this->lastPaymentCriteria) || !$this->lastPaymentCriteria->equals($criteria)) {
				$this->collPayments = PaymentPeer::doSelectJoinTransaction($criteria, $con, $join_behavior);
			}
		}
		$this->lastPaymentCriteria = $criteria;

		return $this->collPayments;
	}

	/**
	 * Clears out the collGuaranteePersonals collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGuaranteePersonals()
	 */
	public function clearGuaranteePersonals()
	{
		$this->collGuaranteePersonals = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGuaranteePersonals collection (array).
	 *
	 * By default this just sets the collGuaranteePersonals collection to an empty array (like clearcollGuaranteePersonals());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGuaranteePersonals()
	{
		$this->collGuaranteePersonals = array();
	}

	/**
	 * Gets an array of GuaranteePersonal objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Credit has previously been saved, it will retrieve
	 * related GuaranteePersonals from storage. If this Credit is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array GuaranteePersonal[]
	 * @throws     PropelException
	 */
	public function getGuaranteePersonals($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGuaranteePersonals === null) {
			if ($this->isNew()) {
			   $this->collGuaranteePersonals = array();
			} else {

				$criteria->add(GuaranteePersonalPeer::CREDIT_ID, $this->id);

				GuaranteePersonalPeer::addSelectColumns($criteria);
				$this->collGuaranteePersonals = GuaranteePersonalPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GuaranteePersonalPeer::CREDIT_ID, $this->id);

				GuaranteePersonalPeer::addSelectColumns($criteria);
				if (!isset($this->lastGuaranteePersonalCriteria) || !$this->lastGuaranteePersonalCriteria->equals($criteria)) {
					$this->collGuaranteePersonals = GuaranteePersonalPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGuaranteePersonalCriteria = $criteria;
		return $this->collGuaranteePersonals;
	}

	/**
	 * Returns the number of related GuaranteePersonal objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related GuaranteePersonal objects.
	 * @throws     PropelException
	 */
	public function countGuaranteePersonals(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGuaranteePersonals === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GuaranteePersonalPeer::CREDIT_ID, $this->id);

				$count = GuaranteePersonalPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GuaranteePersonalPeer::CREDIT_ID, $this->id);

				if (!isset($this->lastGuaranteePersonalCriteria) || !$this->lastGuaranteePersonalCriteria->equals($criteria)) {
					$count = GuaranteePersonalPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collGuaranteePersonals);
				}
			} else {
				$count = count($this->collGuaranteePersonals);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a GuaranteePersonal object to this object
	 * through the GuaranteePersonal foreign key attribute.
	 *
	 * @param      GuaranteePersonal $l GuaranteePersonal
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGuaranteePersonal(GuaranteePersonal $l)
	{
		if ($this->collGuaranteePersonals === null) {
			$this->initGuaranteePersonals();
		}
		if (!in_array($l, $this->collGuaranteePersonals, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGuaranteePersonals, $l);
			$l->setCredit($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Credit is new, it will return
	 * an empty collection; or if this Credit has previously
	 * been saved, it will retrieve related GuaranteePersonals from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Credit.
	 */
	public function getGuaranteePersonalsJoinAssociate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGuaranteePersonals === null) {
			if ($this->isNew()) {
				$this->collGuaranteePersonals = array();
			} else {

				$criteria->add(GuaranteePersonalPeer::CREDIT_ID, $this->id);

				$this->collGuaranteePersonals = GuaranteePersonalPeer::doSelectJoinAssociate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GuaranteePersonalPeer::CREDIT_ID, $this->id);

			if (!isset($this->lastGuaranteePersonalCriteria) || !$this->lastGuaranteePersonalCriteria->equals($criteria)) {
				$this->collGuaranteePersonals = GuaranteePersonalPeer::doSelectJoinAssociate($criteria, $con, $join_behavior);
			}
		}
		$this->lastGuaranteePersonalCriteria = $criteria;

		return $this->collGuaranteePersonals;
	}

	/**
	 * Clears out the collGuaranteeReals collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGuaranteeReals()
	 */
	public function clearGuaranteeReals()
	{
		$this->collGuaranteeReals = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGuaranteeReals collection (array).
	 *
	 * By default this just sets the collGuaranteeReals collection to an empty array (like clearcollGuaranteeReals());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGuaranteeReals()
	{
		$this->collGuaranteeReals = array();
	}

	/**
	 * Gets an array of GuaranteeReal objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Credit has previously been saved, it will retrieve
	 * related GuaranteeReals from storage. If this Credit is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array GuaranteeReal[]
	 * @throws     PropelException
	 */
	public function getGuaranteeReals($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGuaranteeReals === null) {
			if ($this->isNew()) {
			   $this->collGuaranteeReals = array();
			} else {

				$criteria->add(GuaranteeRealPeer::CREDIT_ID, $this->id);

				GuaranteeRealPeer::addSelectColumns($criteria);
				$this->collGuaranteeReals = GuaranteeRealPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GuaranteeRealPeer::CREDIT_ID, $this->id);

				GuaranteeRealPeer::addSelectColumns($criteria);
				if (!isset($this->lastGuaranteeRealCriteria) || !$this->lastGuaranteeRealCriteria->equals($criteria)) {
					$this->collGuaranteeReals = GuaranteeRealPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGuaranteeRealCriteria = $criteria;
		return $this->collGuaranteeReals;
	}

	/**
	 * Returns the number of related GuaranteeReal objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related GuaranteeReal objects.
	 * @throws     PropelException
	 */
	public function countGuaranteeReals(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CreditPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGuaranteeReals === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GuaranteeRealPeer::CREDIT_ID, $this->id);

				$count = GuaranteeRealPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GuaranteeRealPeer::CREDIT_ID, $this->id);

				if (!isset($this->lastGuaranteeRealCriteria) || !$this->lastGuaranteeRealCriteria->equals($criteria)) {
					$count = GuaranteeRealPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collGuaranteeReals);
				}
			} else {
				$count = count($this->collGuaranteeReals);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a GuaranteeReal object to this object
	 * through the GuaranteeReal foreign key attribute.
	 *
	 * @param      GuaranteeReal $l GuaranteeReal
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGuaranteeReal(GuaranteeReal $l)
	{
		if ($this->collGuaranteeReals === null) {
			$this->initGuaranteeReals();
		}
		if (!in_array($l, $this->collGuaranteeReals, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGuaranteeReals, $l);
			$l->setCredit($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTransactions) {
				foreach ((array) $this->collTransactions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCommitteeMembers) {
				foreach ((array) $this->collCommitteeMembers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPayments) {
				foreach ((array) $this->collPayments as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGuaranteePersonals) {
				foreach ((array) $this->collGuaranteePersonals as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGuaranteeReals) {
				foreach ((array) $this->collGuaranteeReals as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collTransactions = null;
		$this->collCommitteeMembers = null;
		$this->collPayments = null;
		$this->collGuaranteePersonals = null;
		$this->collGuaranteeReals = null;
			$this->aProduct = null;
			$this->aAssociate = null;
			$this->aAccount = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseCredit:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseCredit::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseCredit
