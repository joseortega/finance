<?php


/**
 * Skeleton subclass for representing a row from the 'transfer' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Oct 28 20:37:38 2022
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.account
 */
class Transfer extends BaseTransfer {
    
   public function  __toString() 
  {
      return $this->getAccountFromId();
  }
  
  public function makeTransfer(PropelPDO $con = null) {
      
    if($con == null){
      $con = Propel::getConnection(TransferPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
    }
    
    $con->beginTransaction();
    try
    { 
      $transactionOrigin = new Transaction();
      $transactionOrigin->setAccount($this->getAccountOrigin());
      $transactionOrigin->setAmount($this->getAmount());
      $transactionOrigin->setTransactionType(TransactionTypePeer::retrieveByOperationType(TransactionType::ACCOUNT_TRANSFER_ORIGIN_ACCOUNT));
      $transactionOrigin->setObservation($this->getObservation());
      $transactionOrigin->setUser($this->getUser());
      $transactionOrigin->save($con);
      
      $this->getAccountOrigin()->debit($this->getAmount(), $con);
      
      $transactionOrigin->updateAccountBalance($this->getAccountOrigin()->getBalance(), $con);
      
      
      $transactionDestination = new Transaction();
      $transactionDestination->setAccount($this->getAccountDestination());
      $transactionDestination->setAmount($this->getAmount());
      $transactionDestination->setTransactionType(TransactionTypePeer::retrieveByOperationType(TransactionType::ACCOUNT_TRANSFER_DESTINATION_ACCOUNT));
      $transactionDestination->setObservation($this->getObservation());
      $transactionDestination->setUser($this->getUser());
      $transactionDestination->save($con);
      
      $this->getAccountDestination()->accredit($this->getAmount(), $con);
      
      $transactionDestination->updateAccountBalance($this->getAccountDestination()->getBalance(), $con);
      
      $con->commit();
    }
    catch (Exception $e)
    {
      $con->rollBack();
      throw $e;
    }
      
  }

} // Transfer
