<?php


/**
 * Skeleton subclass for performing query and update operations on the 'account' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Feb 17 18:59:47 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.account
 */
class AccountPeer extends BaseAccountPeer 
{  
  /**
   * Retrieve for select
   * 
   * @param string $q
   * @param int $limit
   * @return array object(Account) 
   */
  static public function retrieveForSelect($q, $limit)
  {
    $criteria = new Criteria();
    $criteria->add(self::NUMBER, '%'.$q.'%', Criteria::LIKE);
    $criteria->addAscendingOrderByColumn(self::NUMBER);
    $criteria->setLimit($limit);
 
    $accounts = array();
    foreach (self::doSelect($criteria) as $account)
    {
      $accounts[$account->getId()] = (string) $account;
    }
 
    return $accounts;
  }
  
  /**
   * Return the max value
   * 
   * @param string $column
   * @param Criteria $criteria
   * @return int 
   */
  public static function max($column, Criteria $criteria = null)
  {
    if($criteria == null){
      $criteria = new Criteria();
    }
    
    $criteria->clearSelectColumns()->addSelectColumn('MAX(' . $column . ')');
    
    $stmt = self::doSelectStmt($criteria);

    $row = $stmt->fetch(PDO::FETCH_NUM);
    $max= (int) $row[0];
    
    return $max;
  }
  
  /**
   * Generate account number
   * 
   * @return int  
   */
  public static function generateNumber()
  {
    $max = self::max(self::NUMBER);

    if(!$max){
        $max = sfConfig::get('app_account_number_offset');
    }

    $number = $max+1;
    
    return $number;
  }
  
  /**
   * Do select expired capitalization
   * 
   * @return array
   */
  public static function doSelectExpiredCapitalization()
  {    
    return AccountPeer::doSelectJoinAll(self::addCriteriaExpiredCapitalization());
  }
  
  /**
   * Do select expired capitalization
   * 
   * @return int
   */
  public static function doCountExpiredCapitalization()
  {    
    return AccountPeer::doCount(self::addCriteriaExpiredCapitalization());
  }
  
  /**
   * Add criteria expired capitalization
   * 
   * @param Criteria $criteria
   * @return Criteria 
   */
  public static function addCriteriaExpiredCapitalization(Criteria $criteria = null)
  {
    if($criteria == null){
      $criteria = new Criteria();
    }
    
    $now = mktime(0, 0, 0, date("m")  , date("d"), date("Y"));
    
    $criteria = new Criteria();
    $criteria->add(self::NEXT_CAPITALIZATION, $now, Criteria::LESS_EQUAL);
    
    return $criteria;
  }
  
  /**
   * Calculate the next capitalization
   * 
   * @param date $lastCpt
   * @param string $timeFactor days o months
   * @param int $number
   * @return date 
   */
  public static function calculateNextCapitalization($lastCpt, $timeFactor, $number)
  {
    if($timeFactor == 'days'){
      $nextCpt = mktime(0, 0, 0, date("m", $lastCpt), date("d", $lastCpt)+$number, date("Y", $lastCpt));
    }elseif($timeFactor == 'months'){
      
      if($lastCpt != mktime(0, 0, 0, date("m", $lastCpt), date('t', $lastCpt), date('Y', $lastCpt))){
        $lastCpt = mktime(0, 0, 0, date("m", $lastCpt)-1, 1, date('Y', $lastCpt));
      }
      
      $nextCpt = mktime(0, 0, 0, date("m", $lastCpt) + $number, 1, date('Y', $lastCpt));
      $nextCpt = mktime(0, 0, 0, date("m", $nextCpt), date('t', $nextCpt), date('Y', $nextCpt));
    }
    
    return $nextCpt;
  }
  
  /**
   * Calculate the next capitalization
   * 
   * @param date $lastCpt
   * @param string $frequency options 
   * (AccountProduct::DAILY, AccountProduct::MONTHLY, AccountProduct::QUARTERLY, AccountProduct::BIYEARLY, AccountProduct::YEARLY)
   */
  public static function calculateNextCapitalization2($lastCpt, $frequency)
  {
    switch ($frequency){

      case AccountProduct::DAILY:
        $nextCpt = AccountPeer::calculateNextCapitalization($lastCpt, 'days', 1);
        break;

      case AccountProduct::MONTHLY:    
        $nextCpt = AccountPeer::calculateNextCapitalization($lastCpt, 'months', 1);
        break;

      case AccountProduct::QUARTERLY:
        $nextCpt = AccountPeer::calculateNextCapitalization($lastCpt, 'months', 3);
        break;

      case AccountProduct::BIYEARLY:
        $nextCpt = AccountPeer::calculateNextCapitalization($lastCpt, 'months', 6);
        break;

      case AccountProduct::YEARLY:
        $nextCpt = AccountPeer::calculateNextCapitalization($lastCpt, 'months', 12);
        break;   
    }

    return $nextCpt;
  }
}
