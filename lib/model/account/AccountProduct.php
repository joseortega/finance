<?php


/**
 * Skeleton subclass for representing a row from the 'account_product' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Feb 17 18:59:47 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.account
 */
class AccountProduct extends BaseAccountProduct 
{
  /**
   * Attribute interest_payment = 'daily'
   */
  const DAILY = 'daily';
  
  /**
   * Attribute interest_payment = 'monthly';
   */
  const MONTHLY = 'monthly';
  
  /**
   * Attribute interest_payment = 'monthly';
   */
  const QUARTERLY = 'quarterly';
  
  /**
   * Attribute interest_payment = 'monthly';
   */
  const BIYEARLY = 'biyearly';
  
  /**
   * Attribute interest_payment = 'monthly';
   */
  const YEARLY = 'yearly';
  
  
  public function save(PropelPDO $con = null) 
  {
    if (is_null($con)){
      $con = Propel::getConnection(AccountProductPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
    }
      $con->beginTransaction();
      
      try{

        if($this->isColumnModified(AccountProductPeer::CAPITALIZATION_FREQUENCY)){

          foreach ($this->getAccounts() as $account){
            $account->updateNextCapitalization($con);
          }
        }
    
        parent::save($con);

        $con->commit();

    }catch (Exception $e){
      
      $con->rollBack();
      throw $e;
    }
  }

  /**
   * Post insert
   * 
   * @param PropelPDO $con 
   */
  public function postInsert(PropelPDO $con = null) 
  {  
    parent::postInsert($con);
  }

  /**
   * Get interest rate current
   * 
   * @return RateUnique 
   */
  public function getInterestRateCurrent()
  {

    $criteria = new Criteria();
    $criteria->add(AccountProductInterestRatePeer::PRODUCT_ID, $this->getId(), Criteria::EQUAL);
    $criteria->addDescendingOrderByColumn(AccountProductInterestRatePeer::RATE_UNIQUE_ID);
    
    $productInteresRate = AccountProductInterestRatePeer::doSelectOne($criteria);
    
    if($productInteresRate){
      $rateUnique = $productInteresRate->getRateUnique();
    }else{
      $rateUnique = null;
    }
     
    return $rateUnique;
  }

  /**
   * Get RateUniques
   * 
   * @param Criteria $c
   * @return array object(RateUnique) 
   */
  public function getInterestRates($criteria = null) 
  {
    $rateUniques = array();
    foreach($this->getAccountProductInterestRatesJoinRateUnique($criteria) as $ref){
      $rateUniques[] = $ref->getRateUnique();
    }
    return $rateUniques;
  }
  
  /**
   * Get Interest rate by current date
   * 
   * @param dataTime $date 
   * @return RateUnique
   */
  public function getInterestRate($date)
  {
    $date = mktime(23, 59, 59, date("m", $date), date("d", $date), date("Y", $date));
    
    $criteria = new Criteria();
    $criteria->addJoin(AccountProductInterestRatePeer::RATE_UNIQUE_ID, RateUniquePeer::ID, Criteria::LEFT_JOIN);
    $criteria->add(AccountProductInterestRatePeer::PRODUCT_ID, $this->getId());
    $criteria->add(RateUniquePeer::CREATED_AT, $date, Criteria::LESS_EQUAL);
    $criteria->addDescendingOrderByColumn(RateUniquePeer::ID);
    
    $productRateUnique = AccountProductInterestRatePeer::doSelectOne($criteria);
    
    if($productRateUnique){
      $rateUnique = $productRateUnique->getRateUnique();
    }else{
      $rateUnique = null;
    }
    
    return $rateUnique;
  }

  /**
   * Method toString
   * 
   * @return type 
   */
  public function  __toString() 
  {
    return $this->getName();
  }

} // AccountProduct
