<?php

/**
 * Base class that represents a row from the 'account' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Jan  8 23:27:25 2013
 *
 * @package    lib.model.account.om
 */
abstract class BaseAccount extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AccountPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the associate_id field.
	 * @var        string
	 */
	protected $associate_id;

	/**
	 * The value for the product_id field.
	 * @var        string
	 */
	protected $product_id;

	/**
	 * The value for the number field.
	 * @var        string
	 */
	protected $number;

	/**
	 * The value for the balance field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $balance;

	/**
	 * The value for the blocked_balance field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $blocked_balance;

	/**
	 * The value for the available_balance field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $available_balance;

	/**
	 * The value for the last_capitalization field.
	 * @var        string
	 */
	protected $last_capitalization;

	/**
	 * The value for the next_capitalization field.
	 * @var        string
	 */
	protected $next_capitalization;

	/**
	 * The value for the is_active field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        Associate
	 */
	protected $aAssociate;

	/**
	 * @var        AccountProduct
	 */
	protected $aProduct;

	/**
	 * @var        array BalanceBlockedDetail[] Collection to store aggregation of BalanceBlockedDetail objects.
	 */
	protected $collBalanceBlockedDetails;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBalanceBlockedDetails.
	 */
	private $lastBalanceBlockedDetailCriteria = null;

	/**
	 * @var        array Bankbook[] Collection to store aggregation of Bankbook objects.
	 */
	protected $collBankbooks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBankbooks.
	 */
	private $lastBankbookCriteria = null;

	/**
	 * @var        array Transaction[] Collection to store aggregation of Transaction objects.
	 */
	protected $collTransactions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransactions.
	 */
	private $lastTransactionCriteria = null;

	/**
	 * @var        array Credit[] Collection to store aggregation of Credit objects.
	 */
	protected $collCredits;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCredits.
	 */
	private $lastCreditCriteria = null;

	/**
	 * @var        array Investment[] Collection to store aggregation of Investment objects.
	 */
	protected $collInvestments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collInvestments.
	 */
	private $lastInvestmentCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'AccountPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->balance = '0.00';
		$this->blocked_balance = '0.00';
		$this->available_balance = '0.00';
		$this->is_active = true;
	}

	/**
	 * Initializes internal state of BaseAccount object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [associate_id] column value.
	 * 
	 * @return     string
	 */
	public function getAssociateId()
	{
		return $this->associate_id;
	}

	/**
	 * Get the [product_id] column value.
	 * 
	 * @return     string
	 */
	public function getProductId()
	{
		return $this->product_id;
	}

	/**
	 * Get the [number] column value.
	 * 
	 * @return     string
	 */
	public function getNumber()
	{
		return $this->number;
	}

	/**
	 * Get the [balance] column value.
	 * 
	 * @return     string
	 */
	public function getBalance()
	{
		return $this->balance;
	}

	/**
	 * Get the [blocked_balance] column value.
	 * 
	 * @return     string
	 */
	public function getBlockedBalance()
	{
		return $this->blocked_balance;
	}

	/**
	 * Get the [available_balance] column value.
	 * 
	 * @return     string
	 */
	public function getAvailableBalance()
	{
		return $this->available_balance;
	}

	/**
	 * Get the [optionally formatted] temporal [last_capitalization] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastCapitalization($format = 'Y-m-d')
	{
		if ($this->last_capitalization === null) {
			return null;
		}


		if ($this->last_capitalization === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_capitalization);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_capitalization, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [next_capitalization] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getNextCapitalization($format = 'Y-m-d')
	{
		if ($this->next_capitalization === null) {
			return null;
		}


		if ($this->next_capitalization === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->next_capitalization);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->next_capitalization, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [is_active] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Account The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = AccountPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [associate_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Account The current object (for fluent API support)
	 */
	public function setAssociateId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->associate_id !== $v) {
			$this->associate_id = $v;
			$this->modifiedColumns[] = AccountPeer::ASSOCIATE_ID;
		}

		if ($this->aAssociate !== null && $this->aAssociate->getId() !== $v) {
			$this->aAssociate = null;
		}

		return $this;
	} // setAssociateId()

	/**
	 * Set the value of [product_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Account The current object (for fluent API support)
	 */
	public function setProductId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->product_id !== $v) {
			$this->product_id = $v;
			$this->modifiedColumns[] = AccountPeer::PRODUCT_ID;
		}

		if ($this->aProduct !== null && $this->aProduct->getId() !== $v) {
			$this->aProduct = null;
		}

		return $this;
	} // setProductId()

	/**
	 * Set the value of [number] column.
	 * 
	 * @param      string $v new value
	 * @return     Account The current object (for fluent API support)
	 */
	public function setNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->number !== $v) {
			$this->number = $v;
			$this->modifiedColumns[] = AccountPeer::NUMBER;
		}

		return $this;
	} // setNumber()

	/**
	 * Set the value of [balance] column.
	 * 
	 * @param      string $v new value
	 * @return     Account The current object (for fluent API support)
	 */
	public function setBalance($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->balance !== $v || $this->isNew()) {
			$this->balance = $v;
			$this->modifiedColumns[] = AccountPeer::BALANCE;
		}

		return $this;
	} // setBalance()

	/**
	 * Set the value of [blocked_balance] column.
	 * 
	 * @param      string $v new value
	 * @return     Account The current object (for fluent API support)
	 */
	public function setBlockedBalance($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->blocked_balance !== $v || $this->isNew()) {
			$this->blocked_balance = $v;
			$this->modifiedColumns[] = AccountPeer::BLOCKED_BALANCE;
		}

		return $this;
	} // setBlockedBalance()

	/**
	 * Set the value of [available_balance] column.
	 * 
	 * @param      string $v new value
	 * @return     Account The current object (for fluent API support)
	 */
	public function setAvailableBalance($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->available_balance !== $v || $this->isNew()) {
			$this->available_balance = $v;
			$this->modifiedColumns[] = AccountPeer::AVAILABLE_BALANCE;
		}

		return $this;
	} // setAvailableBalance()

	/**
	 * Sets the value of [last_capitalization] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Account The current object (for fluent API support)
	 */
	public function setLastCapitalization($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_capitalization !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_capitalization !== null && $tmpDt = new DateTime($this->last_capitalization)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_capitalization = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = AccountPeer::LAST_CAPITALIZATION;
			}
		} // if either are not null

		return $this;
	} // setLastCapitalization()

	/**
	 * Sets the value of [next_capitalization] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Account The current object (for fluent API support)
	 */
	public function setNextCapitalization($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->next_capitalization !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->next_capitalization !== null && $tmpDt = new DateTime($this->next_capitalization)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->next_capitalization = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = AccountPeer::NEXT_CAPITALIZATION;
			}
		} // if either are not null

		return $this;
	} // setNextCapitalization()

	/**
	 * Set the value of [is_active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Account The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v || $this->isNew()) {
			$this->is_active = $v;
			$this->modifiedColumns[] = AccountPeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Account The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = AccountPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Account The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = AccountPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->balance !== '0.00') {
				return false;
			}

			if ($this->blocked_balance !== '0.00') {
				return false;
			}

			if ($this->available_balance !== '0.00') {
				return false;
			}

			if ($this->is_active !== true) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->associate_id = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->product_id = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->number = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->balance = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->blocked_balance = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->available_balance = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->last_capitalization = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->next_capitalization = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->is_active = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->created_at = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->updated_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 12; // 12 = AccountPeer::NUM_COLUMNS - AccountPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Account object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAssociate !== null && $this->associate_id !== $this->aAssociate->getId()) {
			$this->aAssociate = null;
		}
		if ($this->aProduct !== null && $this->product_id !== $this->aProduct->getId()) {
			$this->aProduct = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AccountPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AccountPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAssociate = null;
			$this->aProduct = null;
			$this->collBalanceBlockedDetails = null;
			$this->lastBalanceBlockedDetailCriteria = null;

			$this->collBankbooks = null;
			$this->lastBankbookCriteria = null;

			$this->collTransactions = null;
			$this->lastTransactionCriteria = null;

			$this->collCredits = null;
			$this->lastCreditCriteria = null;

			$this->collInvestments = null;
			$this->lastInvestmentCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AccountPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAccount:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				AccountPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAccount:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AccountPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAccount:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(AccountPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(AccountPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAccount:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				AccountPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAssociate !== null) {
				if ($this->aAssociate->isModified() || $this->aAssociate->isNew()) {
					$affectedRows += $this->aAssociate->save($con);
				}
				$this->setAssociate($this->aAssociate);
			}

			if ($this->aProduct !== null) {
				if ($this->aProduct->isModified() || $this->aProduct->isNew()) {
					$affectedRows += $this->aProduct->save($con);
				}
				$this->setProduct($this->aProduct);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AccountPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AccountPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AccountPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collBalanceBlockedDetails !== null) {
				foreach ($this->collBalanceBlockedDetails as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBankbooks !== null) {
				foreach ($this->collBankbooks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTransactions !== null) {
				foreach ($this->collTransactions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCredits !== null) {
				foreach ($this->collCredits as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collInvestments !== null) {
				foreach ($this->collInvestments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAssociate !== null) {
				if (!$this->aAssociate->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAssociate->getValidationFailures());
				}
			}

			if ($this->aProduct !== null) {
				if (!$this->aProduct->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProduct->getValidationFailures());
				}
			}


			if (($retval = AccountPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collBalanceBlockedDetails !== null) {
					foreach ($this->collBalanceBlockedDetails as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBankbooks !== null) {
					foreach ($this->collBankbooks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTransactions !== null) {
					foreach ($this->collTransactions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCredits !== null) {
					foreach ($this->collCredits as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collInvestments !== null) {
					foreach ($this->collInvestments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AccountPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getAssociateId();
				break;
			case 2:
				return $this->getProductId();
				break;
			case 3:
				return $this->getNumber();
				break;
			case 4:
				return $this->getBalance();
				break;
			case 5:
				return $this->getBlockedBalance();
				break;
			case 6:
				return $this->getAvailableBalance();
				break;
			case 7:
				return $this->getLastCapitalization();
				break;
			case 8:
				return $this->getNextCapitalization();
				break;
			case 9:
				return $this->getIsActive();
				break;
			case 10:
				return $this->getCreatedAt();
				break;
			case 11:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AccountPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getAssociateId(),
			$keys[2] => $this->getProductId(),
			$keys[3] => $this->getNumber(),
			$keys[4] => $this->getBalance(),
			$keys[5] => $this->getBlockedBalance(),
			$keys[6] => $this->getAvailableBalance(),
			$keys[7] => $this->getLastCapitalization(),
			$keys[8] => $this->getNextCapitalization(),
			$keys[9] => $this->getIsActive(),
			$keys[10] => $this->getCreatedAt(),
			$keys[11] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AccountPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setAssociateId($value);
				break;
			case 2:
				$this->setProductId($value);
				break;
			case 3:
				$this->setNumber($value);
				break;
			case 4:
				$this->setBalance($value);
				break;
			case 5:
				$this->setBlockedBalance($value);
				break;
			case 6:
				$this->setAvailableBalance($value);
				break;
			case 7:
				$this->setLastCapitalization($value);
				break;
			case 8:
				$this->setNextCapitalization($value);
				break;
			case 9:
				$this->setIsActive($value);
				break;
			case 10:
				$this->setCreatedAt($value);
				break;
			case 11:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AccountPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAssociateId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setProductId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNumber($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setBalance($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setBlockedBalance($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAvailableBalance($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setLastCapitalization($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNextCapitalization($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIsActive($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCreatedAt($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setUpdatedAt($arr[$keys[11]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AccountPeer::DATABASE_NAME);

		if ($this->isColumnModified(AccountPeer::ID)) $criteria->add(AccountPeer::ID, $this->id);
		if ($this->isColumnModified(AccountPeer::ASSOCIATE_ID)) $criteria->add(AccountPeer::ASSOCIATE_ID, $this->associate_id);
		if ($this->isColumnModified(AccountPeer::PRODUCT_ID)) $criteria->add(AccountPeer::PRODUCT_ID, $this->product_id);
		if ($this->isColumnModified(AccountPeer::NUMBER)) $criteria->add(AccountPeer::NUMBER, $this->number);
		if ($this->isColumnModified(AccountPeer::BALANCE)) $criteria->add(AccountPeer::BALANCE, $this->balance);
		if ($this->isColumnModified(AccountPeer::BLOCKED_BALANCE)) $criteria->add(AccountPeer::BLOCKED_BALANCE, $this->blocked_balance);
		if ($this->isColumnModified(AccountPeer::AVAILABLE_BALANCE)) $criteria->add(AccountPeer::AVAILABLE_BALANCE, $this->available_balance);
		if ($this->isColumnModified(AccountPeer::LAST_CAPITALIZATION)) $criteria->add(AccountPeer::LAST_CAPITALIZATION, $this->last_capitalization);
		if ($this->isColumnModified(AccountPeer::NEXT_CAPITALIZATION)) $criteria->add(AccountPeer::NEXT_CAPITALIZATION, $this->next_capitalization);
		if ($this->isColumnModified(AccountPeer::IS_ACTIVE)) $criteria->add(AccountPeer::IS_ACTIVE, $this->is_active);
		if ($this->isColumnModified(AccountPeer::CREATED_AT)) $criteria->add(AccountPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(AccountPeer::UPDATED_AT)) $criteria->add(AccountPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AccountPeer::DATABASE_NAME);

		$criteria->add(AccountPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Account (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setAssociateId($this->associate_id);

		$copyObj->setProductId($this->product_id);

		$copyObj->setNumber($this->number);

		$copyObj->setBalance($this->balance);

		$copyObj->setBlockedBalance($this->blocked_balance);

		$copyObj->setAvailableBalance($this->available_balance);

		$copyObj->setLastCapitalization($this->last_capitalization);

		$copyObj->setNextCapitalization($this->next_capitalization);

		$copyObj->setIsActive($this->is_active);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getBalanceBlockedDetails() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBalanceBlockedDetail($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBankbooks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBankbook($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTransactions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransaction($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCredits() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCredit($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getInvestments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addInvestment($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Account Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AccountPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AccountPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Associate object.
	 *
	 * @param      Associate $v
	 * @return     Account The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAssociate(Associate $v = null)
	{
		if ($v === null) {
			$this->setAssociateId(NULL);
		} else {
			$this->setAssociateId($v->getId());
		}

		$this->aAssociate = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Associate object, it will not be re-added.
		if ($v !== null) {
			$v->addAccount($this);
		}

		return $this;
	}


	/**
	 * Get the associated Associate object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Associate The associated Associate object.
	 * @throws     PropelException
	 */
	public function getAssociate(PropelPDO $con = null)
	{
		if ($this->aAssociate === null && (($this->associate_id !== "" && $this->associate_id !== null))) {
			$this->aAssociate = AssociatePeer::retrieveByPk($this->associate_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAssociate->addAccounts($this);
			 */
		}
		return $this->aAssociate;
	}

	/**
	 * Declares an association between this object and a AccountProduct object.
	 *
	 * @param      AccountProduct $v
	 * @return     Account The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProduct(AccountProduct $v = null)
	{
		if ($v === null) {
			$this->setProductId(NULL);
		} else {
			$this->setProductId($v->getId());
		}

		$this->aProduct = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AccountProduct object, it will not be re-added.
		if ($v !== null) {
			$v->addAccount($this);
		}

		return $this;
	}


	/**
	 * Get the associated AccountProduct object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AccountProduct The associated AccountProduct object.
	 * @throws     PropelException
	 */
	public function getProduct(PropelPDO $con = null)
	{
		if ($this->aProduct === null && (($this->product_id !== "" && $this->product_id !== null))) {
			$this->aProduct = AccountProductPeer::retrieveByPk($this->product_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProduct->addAccounts($this);
			 */
		}
		return $this->aProduct;
	}

	/**
	 * Clears out the collBalanceBlockedDetails collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBalanceBlockedDetails()
	 */
	public function clearBalanceBlockedDetails()
	{
		$this->collBalanceBlockedDetails = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBalanceBlockedDetails collection (array).
	 *
	 * By default this just sets the collBalanceBlockedDetails collection to an empty array (like clearcollBalanceBlockedDetails());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBalanceBlockedDetails()
	{
		$this->collBalanceBlockedDetails = array();
	}

	/**
	 * Gets an array of BalanceBlockedDetail objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Account has previously been saved, it will retrieve
	 * related BalanceBlockedDetails from storage. If this Account is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array BalanceBlockedDetail[]
	 * @throws     PropelException
	 */
	public function getBalanceBlockedDetails($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBalanceBlockedDetails === null) {
			if ($this->isNew()) {
			   $this->collBalanceBlockedDetails = array();
			} else {

				$criteria->add(BalanceBlockedDetailPeer::ACCOUNT_ID, $this->id);

				BalanceBlockedDetailPeer::addSelectColumns($criteria);
				$this->collBalanceBlockedDetails = BalanceBlockedDetailPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BalanceBlockedDetailPeer::ACCOUNT_ID, $this->id);

				BalanceBlockedDetailPeer::addSelectColumns($criteria);
				if (!isset($this->lastBalanceBlockedDetailCriteria) || !$this->lastBalanceBlockedDetailCriteria->equals($criteria)) {
					$this->collBalanceBlockedDetails = BalanceBlockedDetailPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBalanceBlockedDetailCriteria = $criteria;
		return $this->collBalanceBlockedDetails;
	}

	/**
	 * Returns the number of related BalanceBlockedDetail objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related BalanceBlockedDetail objects.
	 * @throws     PropelException
	 */
	public function countBalanceBlockedDetails(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBalanceBlockedDetails === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BalanceBlockedDetailPeer::ACCOUNT_ID, $this->id);

				$count = BalanceBlockedDetailPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BalanceBlockedDetailPeer::ACCOUNT_ID, $this->id);

				if (!isset($this->lastBalanceBlockedDetailCriteria) || !$this->lastBalanceBlockedDetailCriteria->equals($criteria)) {
					$count = BalanceBlockedDetailPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBalanceBlockedDetails);
				}
			} else {
				$count = count($this->collBalanceBlockedDetails);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a BalanceBlockedDetail object to this object
	 * through the BalanceBlockedDetail foreign key attribute.
	 *
	 * @param      BalanceBlockedDetail $l BalanceBlockedDetail
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBalanceBlockedDetail(BalanceBlockedDetail $l)
	{
		if ($this->collBalanceBlockedDetails === null) {
			$this->initBalanceBlockedDetails();
		}
		if (!in_array($l, $this->collBalanceBlockedDetails, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBalanceBlockedDetails, $l);
			$l->setAccount($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related BalanceBlockedDetails from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getBalanceBlockedDetailsJoinReasonBlock($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBalanceBlockedDetails === null) {
			if ($this->isNew()) {
				$this->collBalanceBlockedDetails = array();
			} else {

				$criteria->add(BalanceBlockedDetailPeer::ACCOUNT_ID, $this->id);

				$this->collBalanceBlockedDetails = BalanceBlockedDetailPeer::doSelectJoinReasonBlock($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BalanceBlockedDetailPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastBalanceBlockedDetailCriteria) || !$this->lastBalanceBlockedDetailCriteria->equals($criteria)) {
				$this->collBalanceBlockedDetails = BalanceBlockedDetailPeer::doSelectJoinReasonBlock($criteria, $con, $join_behavior);
			}
		}
		$this->lastBalanceBlockedDetailCriteria = $criteria;

		return $this->collBalanceBlockedDetails;
	}

	/**
	 * Clears out the collBankbooks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBankbooks()
	 */
	public function clearBankbooks()
	{
		$this->collBankbooks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBankbooks collection (array).
	 *
	 * By default this just sets the collBankbooks collection to an empty array (like clearcollBankbooks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBankbooks()
	{
		$this->collBankbooks = array();
	}

	/**
	 * Gets an array of Bankbook objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Account has previously been saved, it will retrieve
	 * related Bankbooks from storage. If this Account is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Bankbook[]
	 * @throws     PropelException
	 */
	public function getBankbooks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBankbooks === null) {
			if ($this->isNew()) {
			   $this->collBankbooks = array();
			} else {

				$criteria->add(BankbookPeer::ACCOUNT_ID, $this->id);

				BankbookPeer::addSelectColumns($criteria);
				$this->collBankbooks = BankbookPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BankbookPeer::ACCOUNT_ID, $this->id);

				BankbookPeer::addSelectColumns($criteria);
				if (!isset($this->lastBankbookCriteria) || !$this->lastBankbookCriteria->equals($criteria)) {
					$this->collBankbooks = BankbookPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBankbookCriteria = $criteria;
		return $this->collBankbooks;
	}

	/**
	 * Returns the number of related Bankbook objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Bankbook objects.
	 * @throws     PropelException
	 */
	public function countBankbooks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBankbooks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BankbookPeer::ACCOUNT_ID, $this->id);

				$count = BankbookPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BankbookPeer::ACCOUNT_ID, $this->id);

				if (!isset($this->lastBankbookCriteria) || !$this->lastBankbookCriteria->equals($criteria)) {
					$count = BankbookPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBankbooks);
				}
			} else {
				$count = count($this->collBankbooks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Bankbook object to this object
	 * through the Bankbook foreign key attribute.
	 *
	 * @param      Bankbook $l Bankbook
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBankbook(Bankbook $l)
	{
		if ($this->collBankbooks === null) {
			$this->initBankbooks();
		}
		if (!in_array($l, $this->collBankbooks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBankbooks, $l);
			$l->setAccount($this);
		}
	}

	/**
	 * Clears out the collTransactions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransactions()
	 */
	public function clearTransactions()
	{
		$this->collTransactions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransactions collection (array).
	 *
	 * By default this just sets the collTransactions collection to an empty array (like clearcollTransactions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransactions()
	{
		$this->collTransactions = array();
	}

	/**
	 * Gets an array of Transaction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Account has previously been saved, it will retrieve
	 * related Transactions from storage. If this Account is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Transaction[]
	 * @throws     PropelException
	 */
	public function getTransactions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
			   $this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

				TransactionPeer::addSelectColumns($criteria);
				$this->collTransactions = TransactionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

				TransactionPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
					$this->collTransactions = TransactionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransactionCriteria = $criteria;
		return $this->collTransactions;
	}

	/**
	 * Returns the number of related Transaction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Transaction objects.
	 * @throws     PropelException
	 */
	public function countTransactions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

				$count = TransactionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

				if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
					$count = TransactionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTransactions);
				}
			} else {
				$count = count($this->collTransactions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Transaction object to this object
	 * through the Transaction foreign key attribute.
	 *
	 * @param      Transaction $l Transaction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransaction(Transaction $l)
	{
		if ($this->collTransactions === null) {
			$this->initTransactions();
		}
		if (!in_array($l, $this->collTransactions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransactions, $l);
			$l->setAccount($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getTransactionsJoinCash($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinCash($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinCash($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getTransactionsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getTransactionsJoinTransactionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinTransactionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinTransactionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getTransactionsJoinCredit($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinCredit($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinCredit($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getTransactionsJoinBankbook($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinBankbook($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinBankbook($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getTransactionsJoinInvestment($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinInvestment($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinInvestment($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}

	/**
	 * Clears out the collCredits collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCredits()
	 */
	public function clearCredits()
	{
		$this->collCredits = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCredits collection (array).
	 *
	 * By default this just sets the collCredits collection to an empty array (like clearcollCredits());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCredits()
	{
		$this->collCredits = array();
	}

	/**
	 * Gets an array of Credit objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Account has previously been saved, it will retrieve
	 * related Credits from storage. If this Account is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Credit[]
	 * @throws     PropelException
	 */
	public function getCredits($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCredits === null) {
			if ($this->isNew()) {
			   $this->collCredits = array();
			} else {

				$criteria->add(CreditPeer::ACCOUNT_ID, $this->id);

				CreditPeer::addSelectColumns($criteria);
				$this->collCredits = CreditPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CreditPeer::ACCOUNT_ID, $this->id);

				CreditPeer::addSelectColumns($criteria);
				if (!isset($this->lastCreditCriteria) || !$this->lastCreditCriteria->equals($criteria)) {
					$this->collCredits = CreditPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCreditCriteria = $criteria;
		return $this->collCredits;
	}

	/**
	 * Returns the number of related Credit objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Credit objects.
	 * @throws     PropelException
	 */
	public function countCredits(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCredits === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CreditPeer::ACCOUNT_ID, $this->id);

				$count = CreditPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CreditPeer::ACCOUNT_ID, $this->id);

				if (!isset($this->lastCreditCriteria) || !$this->lastCreditCriteria->equals($criteria)) {
					$count = CreditPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCredits);
				}
			} else {
				$count = count($this->collCredits);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Credit object to this object
	 * through the Credit foreign key attribute.
	 *
	 * @param      Credit $l Credit
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCredit(Credit $l)
	{
		if ($this->collCredits === null) {
			$this->initCredits();
		}
		if (!in_array($l, $this->collCredits, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCredits, $l);
			$l->setAccount($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related Credits from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getCreditsJoinProduct($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCredits === null) {
			if ($this->isNew()) {
				$this->collCredits = array();
			} else {

				$criteria->add(CreditPeer::ACCOUNT_ID, $this->id);

				$this->collCredits = CreditPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CreditPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastCreditCriteria) || !$this->lastCreditCriteria->equals($criteria)) {
				$this->collCredits = CreditPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		}
		$this->lastCreditCriteria = $criteria;

		return $this->collCredits;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related Credits from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getCreditsJoinAssociate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCredits === null) {
			if ($this->isNew()) {
				$this->collCredits = array();
			} else {

				$criteria->add(CreditPeer::ACCOUNT_ID, $this->id);

				$this->collCredits = CreditPeer::doSelectJoinAssociate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CreditPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastCreditCriteria) || !$this->lastCreditCriteria->equals($criteria)) {
				$this->collCredits = CreditPeer::doSelectJoinAssociate($criteria, $con, $join_behavior);
			}
		}
		$this->lastCreditCriteria = $criteria;

		return $this->collCredits;
	}

	/**
	 * Clears out the collInvestments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addInvestments()
	 */
	public function clearInvestments()
	{
		$this->collInvestments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collInvestments collection (array).
	 *
	 * By default this just sets the collInvestments collection to an empty array (like clearcollInvestments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initInvestments()
	{
		$this->collInvestments = array();
	}

	/**
	 * Gets an array of Investment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Account has previously been saved, it will retrieve
	 * related Investments from storage. If this Account is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Investment[]
	 * @throws     PropelException
	 */
	public function getInvestments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInvestments === null) {
			if ($this->isNew()) {
			   $this->collInvestments = array();
			} else {

				$criteria->add(InvestmentPeer::ACCOUNT_ID, $this->id);

				InvestmentPeer::addSelectColumns($criteria);
				$this->collInvestments = InvestmentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(InvestmentPeer::ACCOUNT_ID, $this->id);

				InvestmentPeer::addSelectColumns($criteria);
				if (!isset($this->lastInvestmentCriteria) || !$this->lastInvestmentCriteria->equals($criteria)) {
					$this->collInvestments = InvestmentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastInvestmentCriteria = $criteria;
		return $this->collInvestments;
	}

	/**
	 * Returns the number of related Investment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Investment objects.
	 * @throws     PropelException
	 */
	public function countInvestments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collInvestments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(InvestmentPeer::ACCOUNT_ID, $this->id);

				$count = InvestmentPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(InvestmentPeer::ACCOUNT_ID, $this->id);

				if (!isset($this->lastInvestmentCriteria) || !$this->lastInvestmentCriteria->equals($criteria)) {
					$count = InvestmentPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collInvestments);
				}
			} else {
				$count = count($this->collInvestments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Investment object to this object
	 * through the Investment foreign key attribute.
	 *
	 * @param      Investment $l Investment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addInvestment(Investment $l)
	{
		if ($this->collInvestments === null) {
			$this->initInvestments();
		}
		if (!in_array($l, $this->collInvestments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collInvestments, $l);
			$l->setAccount($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related Investments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getInvestmentsJoinAssociate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInvestments === null) {
			if ($this->isNew()) {
				$this->collInvestments = array();
			} else {

				$criteria->add(InvestmentPeer::ACCOUNT_ID, $this->id);

				$this->collInvestments = InvestmentPeer::doSelectJoinAssociate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(InvestmentPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastInvestmentCriteria) || !$this->lastInvestmentCriteria->equals($criteria)) {
				$this->collInvestments = InvestmentPeer::doSelectJoinAssociate($criteria, $con, $join_behavior);
			}
		}
		$this->lastInvestmentCriteria = $criteria;

		return $this->collInvestments;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Account is new, it will return
	 * an empty collection; or if this Account has previously
	 * been saved, it will retrieve related Investments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Account.
	 */
	public function getInvestmentsJoinProduct($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AccountPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInvestments === null) {
			if ($this->isNew()) {
				$this->collInvestments = array();
			} else {

				$criteria->add(InvestmentPeer::ACCOUNT_ID, $this->id);

				$this->collInvestments = InvestmentPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(InvestmentPeer::ACCOUNT_ID, $this->id);

			if (!isset($this->lastInvestmentCriteria) || !$this->lastInvestmentCriteria->equals($criteria)) {
				$this->collInvestments = InvestmentPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		}
		$this->lastInvestmentCriteria = $criteria;

		return $this->collInvestments;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collBalanceBlockedDetails) {
				foreach ((array) $this->collBalanceBlockedDetails as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBankbooks) {
				foreach ((array) $this->collBankbooks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTransactions) {
				foreach ((array) $this->collTransactions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCredits) {
				foreach ((array) $this->collCredits as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collInvestments) {
				foreach ((array) $this->collInvestments as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collBalanceBlockedDetails = null;
		$this->collBankbooks = null;
		$this->collTransactions = null;
		$this->collCredits = null;
		$this->collInvestments = null;
			$this->aAssociate = null;
			$this->aProduct = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseAccount:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseAccount::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseAccount
