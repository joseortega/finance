<?php

/**
 * Base class that represents a row from the 'associate' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Jan  8 23:27:25 2013
 *
 * @package    lib.model.associate.om
 */
abstract class BaseAssociate extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AssociatePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the category_id field.
	 * @var        string
	 */
	protected $category_id;

	/**
	 * The value for the city_hometown_id field.
	 * @var        string
	 */
	protected $city_hometown_id;

	/**
	 * The value for the city_current_id field.
	 * @var        string
	 */
	protected $city_current_id;

	/**
	 * The value for the number field.
	 * @var        string
	 */
	protected $number;

	/**
	 * The value for the identification field.
	 * @var        string
	 */
	protected $identification;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the type field.
	 * @var        string
	 */
	protected $type;

	/**
	 * The value for the is_active field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * The value for the picture field.
	 * @var        string
	 */
	protected $picture;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the neighborhood field.
	 * @var        string
	 */
	protected $neighborhood;

	/**
	 * The value for the website field.
	 * @var        string
	 */
	protected $website;

	/**
	 * The value for the about field.
	 * @var        string
	 */
	protected $about;

	/**
	 * The value for the gender field.
	 * @var        string
	 */
	protected $gender;

	/**
	 * The value for the relationship_status field.
	 * @var        string
	 */
	protected $relationship_status;

	/**
	 * The value for the birthday field.
	 * @var        string
	 */
	protected $birthday;

	/**
	 * The value for the monthly_income field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $monthly_income;

	/**
	 * The value for the monthly_expenditure field.
	 * Note: this column has a database default value of: '0.00'
	 * @var        string
	 */
	protected $monthly_expenditure;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        Category
	 */
	protected $aCategory;

	/**
	 * @var        City
	 */
	protected $aCityHomeTown;

	/**
	 * @var        City
	 */
	protected $aCityCurrent;

	/**
	 * @var        array Relationship[] Collection to store aggregation of Relationship objects.
	 */
	protected $collRelationships;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRelationships.
	 */
	private $lastRelationshipCriteria = null;

	/**
	 * @var        array Email[] Collection to store aggregation of Email objects.
	 */
	protected $collEmails;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmails.
	 */
	private $lastEmailCriteria = null;

	/**
	 * @var        array Phone[] Collection to store aggregation of Phone objects.
	 */
	protected $collPhones;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPhones.
	 */
	private $lastPhoneCriteria = null;

	/**
	 * @var        array Account[] Collection to store aggregation of Account objects.
	 */
	protected $collAccounts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAccounts.
	 */
	private $lastAccountCriteria = null;

	/**
	 * @var        array Credit[] Collection to store aggregation of Credit objects.
	 */
	protected $collCredits;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCredits.
	 */
	private $lastCreditCriteria = null;

	/**
	 * @var        array GuaranteePersonal[] Collection to store aggregation of GuaranteePersonal objects.
	 */
	protected $collGuaranteePersonals;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGuaranteePersonals.
	 */
	private $lastGuaranteePersonalCriteria = null;

	/**
	 * @var        array Investment[] Collection to store aggregation of Investment objects.
	 */
	protected $collInvestments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collInvestments.
	 */
	private $lastInvestmentCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'AssociatePeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_active = true;
		$this->monthly_income = '0.00';
		$this->monthly_expenditure = '0.00';
	}

	/**
	 * Initializes internal state of BaseAssociate object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [category_id] column value.
	 * 
	 * @return     string
	 */
	public function getCategoryId()
	{
		return $this->category_id;
	}

	/**
	 * Get the [city_hometown_id] column value.
	 * 
	 * @return     string
	 */
	public function getCityHometownId()
	{
		return $this->city_hometown_id;
	}

	/**
	 * Get the [city_current_id] column value.
	 * 
	 * @return     string
	 */
	public function getCityCurrentId()
	{
		return $this->city_current_id;
	}

	/**
	 * Get the [number] column value.
	 * 
	 * @return     string
	 */
	public function getNumber()
	{
		return $this->number;
	}

	/**
	 * Get the [identification] column value.
	 * 
	 * @return     string
	 */
	public function getIdentification()
	{
		return $this->identification;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [type] column value.
	 * 
	 * @return     string
	 */
	public function getType()
	{
		return $this->type;
	}

	/**
	 * Get the [is_active] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Get the [picture] column value.
	 * 
	 * @return     string
	 */
	public function getPicture()
	{
		return $this->picture;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [neighborhood] column value.
	 * 
	 * @return     string
	 */
	public function getNeighborhood()
	{
		return $this->neighborhood;
	}

	/**
	 * Get the [website] column value.
	 * 
	 * @return     string
	 */
	public function getWebsite()
	{
		return $this->website;
	}

	/**
	 * Get the [about] column value.
	 * 
	 * @return     string
	 */
	public function getAbout()
	{
		return $this->about;
	}

	/**
	 * Get the [gender] column value.
	 * 
	 * @return     string
	 */
	public function getGender()
	{
		return $this->gender;
	}

	/**
	 * Get the [relationship_status] column value.
	 * 
	 * @return     string
	 */
	public function getRelationshipStatus()
	{
		return $this->relationship_status;
	}

	/**
	 * Get the [optionally formatted] temporal [birthday] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getBirthday($format = 'Y-m-d')
	{
		if ($this->birthday === null) {
			return null;
		}


		if ($this->birthday === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->birthday);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->birthday, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [monthly_income] column value.
	 * 
	 * @return     string
	 */
	public function getMonthlyIncome()
	{
		return $this->monthly_income;
	}

	/**
	 * Get the [monthly_expenditure] column value.
	 * 
	 * @return     string
	 */
	public function getMonthlyExpenditure()
	{
		return $this->monthly_expenditure;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = AssociatePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [category_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setCategoryId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->category_id !== $v) {
			$this->category_id = $v;
			$this->modifiedColumns[] = AssociatePeer::CATEGORY_ID;
		}

		if ($this->aCategory !== null && $this->aCategory->getId() !== $v) {
			$this->aCategory = null;
		}

		return $this;
	} // setCategoryId()

	/**
	 * Set the value of [city_hometown_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setCityHometownId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city_hometown_id !== $v) {
			$this->city_hometown_id = $v;
			$this->modifiedColumns[] = AssociatePeer::CITY_HOMETOWN_ID;
		}

		if ($this->aCityHomeTown !== null && $this->aCityHomeTown->getId() !== $v) {
			$this->aCityHomeTown = null;
		}

		return $this;
	} // setCityHometownId()

	/**
	 * Set the value of [city_current_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setCityCurrentId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city_current_id !== $v) {
			$this->city_current_id = $v;
			$this->modifiedColumns[] = AssociatePeer::CITY_CURRENT_ID;
		}

		if ($this->aCityCurrent !== null && $this->aCityCurrent->getId() !== $v) {
			$this->aCityCurrent = null;
		}

		return $this;
	} // setCityCurrentId()

	/**
	 * Set the value of [number] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->number !== $v) {
			$this->number = $v;
			$this->modifiedColumns[] = AssociatePeer::NUMBER;
		}

		return $this;
	} // setNumber()

	/**
	 * Set the value of [identification] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setIdentification($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->identification !== $v) {
			$this->identification = $v;
			$this->modifiedColumns[] = AssociatePeer::IDENTIFICATION;
		}

		return $this;
	} // setIdentification()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = AssociatePeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [type] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->type !== $v) {
			$this->type = $v;
			$this->modifiedColumns[] = AssociatePeer::TYPE;
		}

		return $this;
	} // setType()

	/**
	 * Set the value of [is_active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v || $this->isNew()) {
			$this->is_active = $v;
			$this->modifiedColumns[] = AssociatePeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Set the value of [picture] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setPicture($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->picture !== $v) {
			$this->picture = $v;
			$this->modifiedColumns[] = AssociatePeer::PICTURE;
		}

		return $this;
	} // setPicture()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = AssociatePeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [neighborhood] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setNeighborhood($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->neighborhood !== $v) {
			$this->neighborhood = $v;
			$this->modifiedColumns[] = AssociatePeer::NEIGHBORHOOD;
		}

		return $this;
	} // setNeighborhood()

	/**
	 * Set the value of [website] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setWebsite($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->website !== $v) {
			$this->website = $v;
			$this->modifiedColumns[] = AssociatePeer::WEBSITE;
		}

		return $this;
	} // setWebsite()

	/**
	 * Set the value of [about] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setAbout($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->about !== $v) {
			$this->about = $v;
			$this->modifiedColumns[] = AssociatePeer::ABOUT;
		}

		return $this;
	} // setAbout()

	/**
	 * Set the value of [gender] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setGender($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->gender !== $v) {
			$this->gender = $v;
			$this->modifiedColumns[] = AssociatePeer::GENDER;
		}

		return $this;
	} // setGender()

	/**
	 * Set the value of [relationship_status] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setRelationshipStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->relationship_status !== $v) {
			$this->relationship_status = $v;
			$this->modifiedColumns[] = AssociatePeer::RELATIONSHIP_STATUS;
		}

		return $this;
	} // setRelationshipStatus()

	/**
	 * Sets the value of [birthday] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setBirthday($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->birthday !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->birthday !== null && $tmpDt = new DateTime($this->birthday)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->birthday = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = AssociatePeer::BIRTHDAY;
			}
		} // if either are not null

		return $this;
	} // setBirthday()

	/**
	 * Set the value of [monthly_income] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setMonthlyIncome($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monthly_income !== $v || $this->isNew()) {
			$this->monthly_income = $v;
			$this->modifiedColumns[] = AssociatePeer::MONTHLY_INCOME;
		}

		return $this;
	} // setMonthlyIncome()

	/**
	 * Set the value of [monthly_expenditure] column.
	 * 
	 * @param      string $v new value
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setMonthlyExpenditure($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->monthly_expenditure !== $v || $this->isNew()) {
			$this->monthly_expenditure = $v;
			$this->modifiedColumns[] = AssociatePeer::MONTHLY_EXPENDITURE;
		}

		return $this;
	} // setMonthlyExpenditure()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = AssociatePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Associate The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = AssociatePeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->is_active !== true) {
				return false;
			}

			if ($this->monthly_income !== '0.00') {
				return false;
			}

			if ($this->monthly_expenditure !== '0.00') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->category_id = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->city_hometown_id = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->city_current_id = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->number = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->identification = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->name = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->type = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->is_active = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->picture = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->address = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->neighborhood = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->website = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->about = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->gender = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->relationship_status = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->birthday = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->monthly_income = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->monthly_expenditure = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->created_at = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->updated_at = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 21; // 21 = AssociatePeer::NUM_COLUMNS - AssociatePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Associate object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCategory !== null && $this->category_id !== $this->aCategory->getId()) {
			$this->aCategory = null;
		}
		if ($this->aCityHomeTown !== null && $this->city_hometown_id !== $this->aCityHomeTown->getId()) {
			$this->aCityHomeTown = null;
		}
		if ($this->aCityCurrent !== null && $this->city_current_id !== $this->aCityCurrent->getId()) {
			$this->aCityCurrent = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AssociatePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AssociatePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCategory = null;
			$this->aCityHomeTown = null;
			$this->aCityCurrent = null;
			$this->collRelationships = null;
			$this->lastRelationshipCriteria = null;

			$this->collEmails = null;
			$this->lastEmailCriteria = null;

			$this->collPhones = null;
			$this->lastPhoneCriteria = null;

			$this->collAccounts = null;
			$this->lastAccountCriteria = null;

			$this->collCredits = null;
			$this->lastCreditCriteria = null;

			$this->collGuaranteePersonals = null;
			$this->lastGuaranteePersonalCriteria = null;

			$this->collInvestments = null;
			$this->lastInvestmentCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AssociatePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAssociate:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				AssociatePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAssociate:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AssociatePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAssociate:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(AssociatePeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(AssociatePeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAssociate:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				AssociatePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCategory !== null) {
				if ($this->aCategory->isModified() || $this->aCategory->isNew()) {
					$affectedRows += $this->aCategory->save($con);
				}
				$this->setCategory($this->aCategory);
			}

			if ($this->aCityHomeTown !== null) {
				if ($this->aCityHomeTown->isModified() || $this->aCityHomeTown->isNew()) {
					$affectedRows += $this->aCityHomeTown->save($con);
				}
				$this->setCityHomeTown($this->aCityHomeTown);
			}

			if ($this->aCityCurrent !== null) {
				if ($this->aCityCurrent->isModified() || $this->aCityCurrent->isNew()) {
					$affectedRows += $this->aCityCurrent->save($con);
				}
				$this->setCityCurrent($this->aCityCurrent);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AssociatePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AssociatePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AssociatePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collRelationships !== null) {
				foreach ($this->collRelationships as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmails !== null) {
				foreach ($this->collEmails as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPhones !== null) {
				foreach ($this->collPhones as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAccounts !== null) {
				foreach ($this->collAccounts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCredits !== null) {
				foreach ($this->collCredits as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGuaranteePersonals !== null) {
				foreach ($this->collGuaranteePersonals as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collInvestments !== null) {
				foreach ($this->collInvestments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCategory !== null) {
				if (!$this->aCategory->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCategory->getValidationFailures());
				}
			}

			if ($this->aCityHomeTown !== null) {
				if (!$this->aCityHomeTown->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCityHomeTown->getValidationFailures());
				}
			}

			if ($this->aCityCurrent !== null) {
				if (!$this->aCityCurrent->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCityCurrent->getValidationFailures());
				}
			}


			if (($retval = AssociatePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collRelationships !== null) {
					foreach ($this->collRelationships as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmails !== null) {
					foreach ($this->collEmails as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPhones !== null) {
					foreach ($this->collPhones as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAccounts !== null) {
					foreach ($this->collAccounts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCredits !== null) {
					foreach ($this->collCredits as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGuaranteePersonals !== null) {
					foreach ($this->collGuaranteePersonals as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collInvestments !== null) {
					foreach ($this->collInvestments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AssociatePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCategoryId();
				break;
			case 2:
				return $this->getCityHometownId();
				break;
			case 3:
				return $this->getCityCurrentId();
				break;
			case 4:
				return $this->getNumber();
				break;
			case 5:
				return $this->getIdentification();
				break;
			case 6:
				return $this->getName();
				break;
			case 7:
				return $this->getType();
				break;
			case 8:
				return $this->getIsActive();
				break;
			case 9:
				return $this->getPicture();
				break;
			case 10:
				return $this->getAddress();
				break;
			case 11:
				return $this->getNeighborhood();
				break;
			case 12:
				return $this->getWebsite();
				break;
			case 13:
				return $this->getAbout();
				break;
			case 14:
				return $this->getGender();
				break;
			case 15:
				return $this->getRelationshipStatus();
				break;
			case 16:
				return $this->getBirthday();
				break;
			case 17:
				return $this->getMonthlyIncome();
				break;
			case 18:
				return $this->getMonthlyExpenditure();
				break;
			case 19:
				return $this->getCreatedAt();
				break;
			case 20:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AssociatePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCategoryId(),
			$keys[2] => $this->getCityHometownId(),
			$keys[3] => $this->getCityCurrentId(),
			$keys[4] => $this->getNumber(),
			$keys[5] => $this->getIdentification(),
			$keys[6] => $this->getName(),
			$keys[7] => $this->getType(),
			$keys[8] => $this->getIsActive(),
			$keys[9] => $this->getPicture(),
			$keys[10] => $this->getAddress(),
			$keys[11] => $this->getNeighborhood(),
			$keys[12] => $this->getWebsite(),
			$keys[13] => $this->getAbout(),
			$keys[14] => $this->getGender(),
			$keys[15] => $this->getRelationshipStatus(),
			$keys[16] => $this->getBirthday(),
			$keys[17] => $this->getMonthlyIncome(),
			$keys[18] => $this->getMonthlyExpenditure(),
			$keys[19] => $this->getCreatedAt(),
			$keys[20] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AssociatePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCategoryId($value);
				break;
			case 2:
				$this->setCityHometownId($value);
				break;
			case 3:
				$this->setCityCurrentId($value);
				break;
			case 4:
				$this->setNumber($value);
				break;
			case 5:
				$this->setIdentification($value);
				break;
			case 6:
				$this->setName($value);
				break;
			case 7:
				$this->setType($value);
				break;
			case 8:
				$this->setIsActive($value);
				break;
			case 9:
				$this->setPicture($value);
				break;
			case 10:
				$this->setAddress($value);
				break;
			case 11:
				$this->setNeighborhood($value);
				break;
			case 12:
				$this->setWebsite($value);
				break;
			case 13:
				$this->setAbout($value);
				break;
			case 14:
				$this->setGender($value);
				break;
			case 15:
				$this->setRelationshipStatus($value);
				break;
			case 16:
				$this->setBirthday($value);
				break;
			case 17:
				$this->setMonthlyIncome($value);
				break;
			case 18:
				$this->setMonthlyExpenditure($value);
				break;
			case 19:
				$this->setCreatedAt($value);
				break;
			case 20:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AssociatePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCategoryId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCityHometownId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCityCurrentId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNumber($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIdentification($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setName($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setType($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIsActive($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPicture($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setAddress($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setNeighborhood($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setWebsite($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setAbout($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setGender($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setRelationshipStatus($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setBirthday($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setMonthlyIncome($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMonthlyExpenditure($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCreatedAt($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setUpdatedAt($arr[$keys[20]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AssociatePeer::DATABASE_NAME);

		if ($this->isColumnModified(AssociatePeer::ID)) $criteria->add(AssociatePeer::ID, $this->id);
		if ($this->isColumnModified(AssociatePeer::CATEGORY_ID)) $criteria->add(AssociatePeer::CATEGORY_ID, $this->category_id);
		if ($this->isColumnModified(AssociatePeer::CITY_HOMETOWN_ID)) $criteria->add(AssociatePeer::CITY_HOMETOWN_ID, $this->city_hometown_id);
		if ($this->isColumnModified(AssociatePeer::CITY_CURRENT_ID)) $criteria->add(AssociatePeer::CITY_CURRENT_ID, $this->city_current_id);
		if ($this->isColumnModified(AssociatePeer::NUMBER)) $criteria->add(AssociatePeer::NUMBER, $this->number);
		if ($this->isColumnModified(AssociatePeer::IDENTIFICATION)) $criteria->add(AssociatePeer::IDENTIFICATION, $this->identification);
		if ($this->isColumnModified(AssociatePeer::NAME)) $criteria->add(AssociatePeer::NAME, $this->name);
		if ($this->isColumnModified(AssociatePeer::TYPE)) $criteria->add(AssociatePeer::TYPE, $this->type);
		if ($this->isColumnModified(AssociatePeer::IS_ACTIVE)) $criteria->add(AssociatePeer::IS_ACTIVE, $this->is_active);
		if ($this->isColumnModified(AssociatePeer::PICTURE)) $criteria->add(AssociatePeer::PICTURE, $this->picture);
		if ($this->isColumnModified(AssociatePeer::ADDRESS)) $criteria->add(AssociatePeer::ADDRESS, $this->address);
		if ($this->isColumnModified(AssociatePeer::NEIGHBORHOOD)) $criteria->add(AssociatePeer::NEIGHBORHOOD, $this->neighborhood);
		if ($this->isColumnModified(AssociatePeer::WEBSITE)) $criteria->add(AssociatePeer::WEBSITE, $this->website);
		if ($this->isColumnModified(AssociatePeer::ABOUT)) $criteria->add(AssociatePeer::ABOUT, $this->about);
		if ($this->isColumnModified(AssociatePeer::GENDER)) $criteria->add(AssociatePeer::GENDER, $this->gender);
		if ($this->isColumnModified(AssociatePeer::RELATIONSHIP_STATUS)) $criteria->add(AssociatePeer::RELATIONSHIP_STATUS, $this->relationship_status);
		if ($this->isColumnModified(AssociatePeer::BIRTHDAY)) $criteria->add(AssociatePeer::BIRTHDAY, $this->birthday);
		if ($this->isColumnModified(AssociatePeer::MONTHLY_INCOME)) $criteria->add(AssociatePeer::MONTHLY_INCOME, $this->monthly_income);
		if ($this->isColumnModified(AssociatePeer::MONTHLY_EXPENDITURE)) $criteria->add(AssociatePeer::MONTHLY_EXPENDITURE, $this->monthly_expenditure);
		if ($this->isColumnModified(AssociatePeer::CREATED_AT)) $criteria->add(AssociatePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(AssociatePeer::UPDATED_AT)) $criteria->add(AssociatePeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AssociatePeer::DATABASE_NAME);

		$criteria->add(AssociatePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Associate (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCategoryId($this->category_id);

		$copyObj->setCityHometownId($this->city_hometown_id);

		$copyObj->setCityCurrentId($this->city_current_id);

		$copyObj->setNumber($this->number);

		$copyObj->setIdentification($this->identification);

		$copyObj->setName($this->name);

		$copyObj->setType($this->type);

		$copyObj->setIsActive($this->is_active);

		$copyObj->setPicture($this->picture);

		$copyObj->setAddress($this->address);

		$copyObj->setNeighborhood($this->neighborhood);

		$copyObj->setWebsite($this->website);

		$copyObj->setAbout($this->about);

		$copyObj->setGender($this->gender);

		$copyObj->setRelationshipStatus($this->relationship_status);

		$copyObj->setBirthday($this->birthday);

		$copyObj->setMonthlyIncome($this->monthly_income);

		$copyObj->setMonthlyExpenditure($this->monthly_expenditure);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getRelationships() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRelationship($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmails() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmail($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPhones() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPhone($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAccounts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAccount($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCredits() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCredit($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGuaranteePersonals() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGuaranteePersonal($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getInvestments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addInvestment($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Associate Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AssociatePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AssociatePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Category object.
	 *
	 * @param      Category $v
	 * @return     Associate The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCategory(Category $v = null)
	{
		if ($v === null) {
			$this->setCategoryId(NULL);
		} else {
			$this->setCategoryId($v->getId());
		}

		$this->aCategory = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Category object, it will not be re-added.
		if ($v !== null) {
			$v->addAssociate($this);
		}

		return $this;
	}


	/**
	 * Get the associated Category object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Category The associated Category object.
	 * @throws     PropelException
	 */
	public function getCategory(PropelPDO $con = null)
	{
		if ($this->aCategory === null && (($this->category_id !== "" && $this->category_id !== null))) {
			$this->aCategory = CategoryPeer::retrieveByPk($this->category_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCategory->addAssociates($this);
			 */
		}
		return $this->aCategory;
	}

	/**
	 * Declares an association between this object and a City object.
	 *
	 * @param      City $v
	 * @return     Associate The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCityHomeTown(City $v = null)
	{
		if ($v === null) {
			$this->setCityHometownId(NULL);
		} else {
			$this->setCityHometownId($v->getId());
		}

		$this->aCityHomeTown = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the City object, it will not be re-added.
		if ($v !== null) {
			$v->addAssociateRelatedByCityHometownId($this);
		}

		return $this;
	}


	/**
	 * Get the associated City object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     City The associated City object.
	 * @throws     PropelException
	 */
	public function getCityHomeTown(PropelPDO $con = null)
	{
		if ($this->aCityHomeTown === null && (($this->city_hometown_id !== "" && $this->city_hometown_id !== null))) {
			$this->aCityHomeTown = CityPeer::retrieveByPk($this->city_hometown_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCityHomeTown->addAssociatesRelatedByCityHometownId($this);
			 */
		}
		return $this->aCityHomeTown;
	}

	/**
	 * Declares an association between this object and a City object.
	 *
	 * @param      City $v
	 * @return     Associate The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCityCurrent(City $v = null)
	{
		if ($v === null) {
			$this->setCityCurrentId(NULL);
		} else {
			$this->setCityCurrentId($v->getId());
		}

		$this->aCityCurrent = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the City object, it will not be re-added.
		if ($v !== null) {
			$v->addAssociateRelatedByCityCurrentId($this);
		}

		return $this;
	}


	/**
	 * Get the associated City object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     City The associated City object.
	 * @throws     PropelException
	 */
	public function getCityCurrent(PropelPDO $con = null)
	{
		if ($this->aCityCurrent === null && (($this->city_current_id !== "" && $this->city_current_id !== null))) {
			$this->aCityCurrent = CityPeer::retrieveByPk($this->city_current_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCityCurrent->addAssociatesRelatedByCityCurrentId($this);
			 */
		}
		return $this->aCityCurrent;
	}

	/**
	 * Clears out the collRelationships collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRelationships()
	 */
	public function clearRelationships()
	{
		$this->collRelationships = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRelationships collection (array).
	 *
	 * By default this just sets the collRelationships collection to an empty array (like clearcollRelationships());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRelationships()
	{
		$this->collRelationships = array();
	}

	/**
	 * Gets an array of Relationship objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Associate has previously been saved, it will retrieve
	 * related Relationships from storage. If this Associate is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Relationship[]
	 * @throws     PropelException
	 */
	public function getRelationships($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelationships === null) {
			if ($this->isNew()) {
			   $this->collRelationships = array();
			} else {

				$criteria->add(RelationshipPeer::ASSOCIATE_ID, $this->id);

				RelationshipPeer::addSelectColumns($criteria);
				$this->collRelationships = RelationshipPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RelationshipPeer::ASSOCIATE_ID, $this->id);

				RelationshipPeer::addSelectColumns($criteria);
				if (!isset($this->lastRelationshipCriteria) || !$this->lastRelationshipCriteria->equals($criteria)) {
					$this->collRelationships = RelationshipPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRelationshipCriteria = $criteria;
		return $this->collRelationships;
	}

	/**
	 * Returns the number of related Relationship objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Relationship objects.
	 * @throws     PropelException
	 */
	public function countRelationships(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRelationships === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RelationshipPeer::ASSOCIATE_ID, $this->id);

				$count = RelationshipPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RelationshipPeer::ASSOCIATE_ID, $this->id);

				if (!isset($this->lastRelationshipCriteria) || !$this->lastRelationshipCriteria->equals($criteria)) {
					$count = RelationshipPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRelationships);
				}
			} else {
				$count = count($this->collRelationships);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Relationship object to this object
	 * through the Relationship foreign key attribute.
	 *
	 * @param      Relationship $l Relationship
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRelationship(Relationship $l)
	{
		if ($this->collRelationships === null) {
			$this->initRelationships();
		}
		if (!in_array($l, $this->collRelationships, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRelationships, $l);
			$l->setAssociate($this);
		}
	}

	/**
	 * Clears out the collEmails collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmails()
	 */
	public function clearEmails()
	{
		$this->collEmails = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmails collection (array).
	 *
	 * By default this just sets the collEmails collection to an empty array (like clearcollEmails());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmails()
	{
		$this->collEmails = array();
	}

	/**
	 * Gets an array of Email objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Associate has previously been saved, it will retrieve
	 * related Emails from storage. If this Associate is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Email[]
	 * @throws     PropelException
	 */
	public function getEmails($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmails === null) {
			if ($this->isNew()) {
			   $this->collEmails = array();
			} else {

				$criteria->add(EmailPeer::ASSOCIATE_ID, $this->id);

				EmailPeer::addSelectColumns($criteria);
				$this->collEmails = EmailPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmailPeer::ASSOCIATE_ID, $this->id);

				EmailPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmailCriteria) || !$this->lastEmailCriteria->equals($criteria)) {
					$this->collEmails = EmailPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmailCriteria = $criteria;
		return $this->collEmails;
	}

	/**
	 * Returns the number of related Email objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Email objects.
	 * @throws     PropelException
	 */
	public function countEmails(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmails === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmailPeer::ASSOCIATE_ID, $this->id);

				$count = EmailPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmailPeer::ASSOCIATE_ID, $this->id);

				if (!isset($this->lastEmailCriteria) || !$this->lastEmailCriteria->equals($criteria)) {
					$count = EmailPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmails);
				}
			} else {
				$count = count($this->collEmails);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Email object to this object
	 * through the Email foreign key attribute.
	 *
	 * @param      Email $l Email
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmail(Email $l)
	{
		if ($this->collEmails === null) {
			$this->initEmails();
		}
		if (!in_array($l, $this->collEmails, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmails, $l);
			$l->setAssociate($this);
		}
	}

	/**
	 * Clears out the collPhones collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPhones()
	 */
	public function clearPhones()
	{
		$this->collPhones = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPhones collection (array).
	 *
	 * By default this just sets the collPhones collection to an empty array (like clearcollPhones());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPhones()
	{
		$this->collPhones = array();
	}

	/**
	 * Gets an array of Phone objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Associate has previously been saved, it will retrieve
	 * related Phones from storage. If this Associate is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Phone[]
	 * @throws     PropelException
	 */
	public function getPhones($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhones === null) {
			if ($this->isNew()) {
			   $this->collPhones = array();
			} else {

				$criteria->add(PhonePeer::ASSOCIATE_ID, $this->id);

				PhonePeer::addSelectColumns($criteria);
				$this->collPhones = PhonePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PhonePeer::ASSOCIATE_ID, $this->id);

				PhonePeer::addSelectColumns($criteria);
				if (!isset($this->lastPhoneCriteria) || !$this->lastPhoneCriteria->equals($criteria)) {
					$this->collPhones = PhonePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPhoneCriteria = $criteria;
		return $this->collPhones;
	}

	/**
	 * Returns the number of related Phone objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Phone objects.
	 * @throws     PropelException
	 */
	public function countPhones(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPhones === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PhonePeer::ASSOCIATE_ID, $this->id);

				$count = PhonePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PhonePeer::ASSOCIATE_ID, $this->id);

				if (!isset($this->lastPhoneCriteria) || !$this->lastPhoneCriteria->equals($criteria)) {
					$count = PhonePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPhones);
				}
			} else {
				$count = count($this->collPhones);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Phone object to this object
	 * through the Phone foreign key attribute.
	 *
	 * @param      Phone $l Phone
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPhone(Phone $l)
	{
		if ($this->collPhones === null) {
			$this->initPhones();
		}
		if (!in_array($l, $this->collPhones, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPhones, $l);
			$l->setAssociate($this);
		}
	}

	/**
	 * Clears out the collAccounts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAccounts()
	 */
	public function clearAccounts()
	{
		$this->collAccounts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAccounts collection (array).
	 *
	 * By default this just sets the collAccounts collection to an empty array (like clearcollAccounts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAccounts()
	{
		$this->collAccounts = array();
	}

	/**
	 * Gets an array of Account objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Associate has previously been saved, it will retrieve
	 * related Accounts from storage. If this Associate is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Account[]
	 * @throws     PropelException
	 */
	public function getAccounts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAccounts === null) {
			if ($this->isNew()) {
			   $this->collAccounts = array();
			} else {

				$criteria->add(AccountPeer::ASSOCIATE_ID, $this->id);

				AccountPeer::addSelectColumns($criteria);
				$this->collAccounts = AccountPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AccountPeer::ASSOCIATE_ID, $this->id);

				AccountPeer::addSelectColumns($criteria);
				if (!isset($this->lastAccountCriteria) || !$this->lastAccountCriteria->equals($criteria)) {
					$this->collAccounts = AccountPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAccountCriteria = $criteria;
		return $this->collAccounts;
	}

	/**
	 * Returns the number of related Account objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Account objects.
	 * @throws     PropelException
	 */
	public function countAccounts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAccounts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AccountPeer::ASSOCIATE_ID, $this->id);

				$count = AccountPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AccountPeer::ASSOCIATE_ID, $this->id);

				if (!isset($this->lastAccountCriteria) || !$this->lastAccountCriteria->equals($criteria)) {
					$count = AccountPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAccounts);
				}
			} else {
				$count = count($this->collAccounts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Account object to this object
	 * through the Account foreign key attribute.
	 *
	 * @param      Account $l Account
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAccount(Account $l)
	{
		if ($this->collAccounts === null) {
			$this->initAccounts();
		}
		if (!in_array($l, $this->collAccounts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAccounts, $l);
			$l->setAssociate($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Associate is new, it will return
	 * an empty collection; or if this Associate has previously
	 * been saved, it will retrieve related Accounts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Associate.
	 */
	public function getAccountsJoinProduct($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAccounts === null) {
			if ($this->isNew()) {
				$this->collAccounts = array();
			} else {

				$criteria->add(AccountPeer::ASSOCIATE_ID, $this->id);

				$this->collAccounts = AccountPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AccountPeer::ASSOCIATE_ID, $this->id);

			if (!isset($this->lastAccountCriteria) || !$this->lastAccountCriteria->equals($criteria)) {
				$this->collAccounts = AccountPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		}
		$this->lastAccountCriteria = $criteria;

		return $this->collAccounts;
	}

	/**
	 * Clears out the collCredits collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCredits()
	 */
	public function clearCredits()
	{
		$this->collCredits = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCredits collection (array).
	 *
	 * By default this just sets the collCredits collection to an empty array (like clearcollCredits());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCredits()
	{
		$this->collCredits = array();
	}

	/**
	 * Gets an array of Credit objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Associate has previously been saved, it will retrieve
	 * related Credits from storage. If this Associate is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Credit[]
	 * @throws     PropelException
	 */
	public function getCredits($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCredits === null) {
			if ($this->isNew()) {
			   $this->collCredits = array();
			} else {

				$criteria->add(CreditPeer::ASSOCIATE_ID, $this->id);

				CreditPeer::addSelectColumns($criteria);
				$this->collCredits = CreditPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CreditPeer::ASSOCIATE_ID, $this->id);

				CreditPeer::addSelectColumns($criteria);
				if (!isset($this->lastCreditCriteria) || !$this->lastCreditCriteria->equals($criteria)) {
					$this->collCredits = CreditPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCreditCriteria = $criteria;
		return $this->collCredits;
	}

	/**
	 * Returns the number of related Credit objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Credit objects.
	 * @throws     PropelException
	 */
	public function countCredits(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCredits === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CreditPeer::ASSOCIATE_ID, $this->id);

				$count = CreditPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CreditPeer::ASSOCIATE_ID, $this->id);

				if (!isset($this->lastCreditCriteria) || !$this->lastCreditCriteria->equals($criteria)) {
					$count = CreditPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCredits);
				}
			} else {
				$count = count($this->collCredits);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Credit object to this object
	 * through the Credit foreign key attribute.
	 *
	 * @param      Credit $l Credit
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCredit(Credit $l)
	{
		if ($this->collCredits === null) {
			$this->initCredits();
		}
		if (!in_array($l, $this->collCredits, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCredits, $l);
			$l->setAssociate($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Associate is new, it will return
	 * an empty collection; or if this Associate has previously
	 * been saved, it will retrieve related Credits from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Associate.
	 */
	public function getCreditsJoinProduct($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCredits === null) {
			if ($this->isNew()) {
				$this->collCredits = array();
			} else {

				$criteria->add(CreditPeer::ASSOCIATE_ID, $this->id);

				$this->collCredits = CreditPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CreditPeer::ASSOCIATE_ID, $this->id);

			if (!isset($this->lastCreditCriteria) || !$this->lastCreditCriteria->equals($criteria)) {
				$this->collCredits = CreditPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		}
		$this->lastCreditCriteria = $criteria;

		return $this->collCredits;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Associate is new, it will return
	 * an empty collection; or if this Associate has previously
	 * been saved, it will retrieve related Credits from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Associate.
	 */
	public function getCreditsJoinAccount($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCredits === null) {
			if ($this->isNew()) {
				$this->collCredits = array();
			} else {

				$criteria->add(CreditPeer::ASSOCIATE_ID, $this->id);

				$this->collCredits = CreditPeer::doSelectJoinAccount($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CreditPeer::ASSOCIATE_ID, $this->id);

			if (!isset($this->lastCreditCriteria) || !$this->lastCreditCriteria->equals($criteria)) {
				$this->collCredits = CreditPeer::doSelectJoinAccount($criteria, $con, $join_behavior);
			}
		}
		$this->lastCreditCriteria = $criteria;

		return $this->collCredits;
	}

	/**
	 * Clears out the collGuaranteePersonals collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGuaranteePersonals()
	 */
	public function clearGuaranteePersonals()
	{
		$this->collGuaranteePersonals = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGuaranteePersonals collection (array).
	 *
	 * By default this just sets the collGuaranteePersonals collection to an empty array (like clearcollGuaranteePersonals());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGuaranteePersonals()
	{
		$this->collGuaranteePersonals = array();
	}

	/**
	 * Gets an array of GuaranteePersonal objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Associate has previously been saved, it will retrieve
	 * related GuaranteePersonals from storage. If this Associate is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array GuaranteePersonal[]
	 * @throws     PropelException
	 */
	public function getGuaranteePersonals($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGuaranteePersonals === null) {
			if ($this->isNew()) {
			   $this->collGuaranteePersonals = array();
			} else {

				$criteria->add(GuaranteePersonalPeer::ASSOCIATE_ID, $this->id);

				GuaranteePersonalPeer::addSelectColumns($criteria);
				$this->collGuaranteePersonals = GuaranteePersonalPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GuaranteePersonalPeer::ASSOCIATE_ID, $this->id);

				GuaranteePersonalPeer::addSelectColumns($criteria);
				if (!isset($this->lastGuaranteePersonalCriteria) || !$this->lastGuaranteePersonalCriteria->equals($criteria)) {
					$this->collGuaranteePersonals = GuaranteePersonalPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGuaranteePersonalCriteria = $criteria;
		return $this->collGuaranteePersonals;
	}

	/**
	 * Returns the number of related GuaranteePersonal objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related GuaranteePersonal objects.
	 * @throws     PropelException
	 */
	public function countGuaranteePersonals(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGuaranteePersonals === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GuaranteePersonalPeer::ASSOCIATE_ID, $this->id);

				$count = GuaranteePersonalPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GuaranteePersonalPeer::ASSOCIATE_ID, $this->id);

				if (!isset($this->lastGuaranteePersonalCriteria) || !$this->lastGuaranteePersonalCriteria->equals($criteria)) {
					$count = GuaranteePersonalPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collGuaranteePersonals);
				}
			} else {
				$count = count($this->collGuaranteePersonals);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a GuaranteePersonal object to this object
	 * through the GuaranteePersonal foreign key attribute.
	 *
	 * @param      GuaranteePersonal $l GuaranteePersonal
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGuaranteePersonal(GuaranteePersonal $l)
	{
		if ($this->collGuaranteePersonals === null) {
			$this->initGuaranteePersonals();
		}
		if (!in_array($l, $this->collGuaranteePersonals, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGuaranteePersonals, $l);
			$l->setAssociate($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Associate is new, it will return
	 * an empty collection; or if this Associate has previously
	 * been saved, it will retrieve related GuaranteePersonals from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Associate.
	 */
	public function getGuaranteePersonalsJoinCredit($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGuaranteePersonals === null) {
			if ($this->isNew()) {
				$this->collGuaranteePersonals = array();
			} else {

				$criteria->add(GuaranteePersonalPeer::ASSOCIATE_ID, $this->id);

				$this->collGuaranteePersonals = GuaranteePersonalPeer::doSelectJoinCredit($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GuaranteePersonalPeer::ASSOCIATE_ID, $this->id);

			if (!isset($this->lastGuaranteePersonalCriteria) || !$this->lastGuaranteePersonalCriteria->equals($criteria)) {
				$this->collGuaranteePersonals = GuaranteePersonalPeer::doSelectJoinCredit($criteria, $con, $join_behavior);
			}
		}
		$this->lastGuaranteePersonalCriteria = $criteria;

		return $this->collGuaranteePersonals;
	}

	/**
	 * Clears out the collInvestments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addInvestments()
	 */
	public function clearInvestments()
	{
		$this->collInvestments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collInvestments collection (array).
	 *
	 * By default this just sets the collInvestments collection to an empty array (like clearcollInvestments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initInvestments()
	{
		$this->collInvestments = array();
	}

	/**
	 * Gets an array of Investment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Associate has previously been saved, it will retrieve
	 * related Investments from storage. If this Associate is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Investment[]
	 * @throws     PropelException
	 */
	public function getInvestments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInvestments === null) {
			if ($this->isNew()) {
			   $this->collInvestments = array();
			} else {

				$criteria->add(InvestmentPeer::ASSOCIATE_ID, $this->id);

				InvestmentPeer::addSelectColumns($criteria);
				$this->collInvestments = InvestmentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(InvestmentPeer::ASSOCIATE_ID, $this->id);

				InvestmentPeer::addSelectColumns($criteria);
				if (!isset($this->lastInvestmentCriteria) || !$this->lastInvestmentCriteria->equals($criteria)) {
					$this->collInvestments = InvestmentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastInvestmentCriteria = $criteria;
		return $this->collInvestments;
	}

	/**
	 * Returns the number of related Investment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Investment objects.
	 * @throws     PropelException
	 */
	public function countInvestments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collInvestments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(InvestmentPeer::ASSOCIATE_ID, $this->id);

				$count = InvestmentPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(InvestmentPeer::ASSOCIATE_ID, $this->id);

				if (!isset($this->lastInvestmentCriteria) || !$this->lastInvestmentCriteria->equals($criteria)) {
					$count = InvestmentPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collInvestments);
				}
			} else {
				$count = count($this->collInvestments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Investment object to this object
	 * through the Investment foreign key attribute.
	 *
	 * @param      Investment $l Investment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addInvestment(Investment $l)
	{
		if ($this->collInvestments === null) {
			$this->initInvestments();
		}
		if (!in_array($l, $this->collInvestments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collInvestments, $l);
			$l->setAssociate($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Associate is new, it will return
	 * an empty collection; or if this Associate has previously
	 * been saved, it will retrieve related Investments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Associate.
	 */
	public function getInvestmentsJoinAccount($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInvestments === null) {
			if ($this->isNew()) {
				$this->collInvestments = array();
			} else {

				$criteria->add(InvestmentPeer::ASSOCIATE_ID, $this->id);

				$this->collInvestments = InvestmentPeer::doSelectJoinAccount($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(InvestmentPeer::ASSOCIATE_ID, $this->id);

			if (!isset($this->lastInvestmentCriteria) || !$this->lastInvestmentCriteria->equals($criteria)) {
				$this->collInvestments = InvestmentPeer::doSelectJoinAccount($criteria, $con, $join_behavior);
			}
		}
		$this->lastInvestmentCriteria = $criteria;

		return $this->collInvestments;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Associate is new, it will return
	 * an empty collection; or if this Associate has previously
	 * been saved, it will retrieve related Investments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Associate.
	 */
	public function getInvestmentsJoinProduct($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AssociatePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInvestments === null) {
			if ($this->isNew()) {
				$this->collInvestments = array();
			} else {

				$criteria->add(InvestmentPeer::ASSOCIATE_ID, $this->id);

				$this->collInvestments = InvestmentPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(InvestmentPeer::ASSOCIATE_ID, $this->id);

			if (!isset($this->lastInvestmentCriteria) || !$this->lastInvestmentCriteria->equals($criteria)) {
				$this->collInvestments = InvestmentPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		}
		$this->lastInvestmentCriteria = $criteria;

		return $this->collInvestments;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collRelationships) {
				foreach ((array) $this->collRelationships as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmails) {
				foreach ((array) $this->collEmails as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPhones) {
				foreach ((array) $this->collPhones as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAccounts) {
				foreach ((array) $this->collAccounts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCredits) {
				foreach ((array) $this->collCredits as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGuaranteePersonals) {
				foreach ((array) $this->collGuaranteePersonals as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collInvestments) {
				foreach ((array) $this->collInvestments as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collRelationships = null;
		$this->collEmails = null;
		$this->collPhones = null;
		$this->collAccounts = null;
		$this->collCredits = null;
		$this->collGuaranteePersonals = null;
		$this->collInvestments = null;
			$this->aCategory = null;
			$this->aCityHomeTown = null;
			$this->aCityCurrent = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseAssociate:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseAssociate::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseAssociate
