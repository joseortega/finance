<?php


/**
 * Skeleton subclass for representing a row from the 'associate' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Feb 16 06:30:46 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.associate
 */
class Associate extends BaseAssociate 
{
  /**
   * Attribute type = person
   */
  const TYPE_PERSON = 'person';
  
  /**
   * Attribute type = organization
   */
  const TYPE_ORGANIZATION = 'organization';
  
  /**
   * Save this object
   * 
   * @param PropelPDO $con 
   */
  public function save(PropelPDO $con = null) 
  {
    if (is_null($con)){
      $con = Propel::getConnection(AssociatePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
    }

    $con->beginTransaction();
    
    try{
      
      $ret = parent::save($con);
 
      $this->updateLuceneIndex();

      $con->commit();
      
      return $ret;

    }catch (Exception $e){
      
        $con->rollBack();
        throw $e;
    }
  }
  
  /**
   * Delete this object
   * 
   * @param PropelPDO $con
   * @return type 
   */
  public function delete(PropelPDO $con = null) 
  {
    $index = AssociatePeer::getLuceneIndex();

    if ($hit = $index->find('pk:'.$this->getId()))
    {
      $index->delete($hit->id);
    }

    return parent::delete($con);
  }

  /**
   * Post save this object
   * 
   * @param PropelPDO $con 
   */
  public function postSave(PropelPDO $con = null) 
  {
    parent::postSave($con);
  }

  /**
   * Update lucene insex
   */
  public function updateLuceneIndex()
  {
    $index = AssociatePeer::getLuceneIndex();

    // remove an existing entry
    if ($hit = $index->find('pk:'.$this->getId()))
    {
      $index->delete($hit->id);
    }

    $doc = new Zend_Search_Lucene_Document();

    // store job primary key URL to identify it in the search results
    $doc->addField(Zend_Search_Lucene_Field::UnIndexed('pk', $this->getId()));

    // index associate fields
    $doc->addField(Zend_Search_Lucene_Field::UnStored('name', $this->getName(), 'utf-8'));
    
    Zend_Search_Lucene_Analysis_Analyzer::setDefault(new Zend_Search_Lucene_Analysis_Analyzer_Common_TextNum_CaseInsensitive());
    
    $doc->addField(Zend_Search_Lucene_Field::UnStored('number', $this->getNumber(), 'utf-8'));
    $doc->addField(Zend_Search_Lucene_Field::UnStored('identification', $this->getIdentification(), 'utf-8'));

    // add associate to the index
    $index->addDocument($doc);
    $index->commit();
  }
  
  /**
   * Get isOrganization
   * 
   * @return boolean 
   */
  public function isOrganization()
  {
    $b = false;
    if($this->getType() == self::TYPE_ORGANIZATION){
      $b = true;
    }

    return $b;
  }

  /**
   * Get isPerson
   * 
   * @return boolean 
   */
  public function isPerson()
  {
    $b = false;
    if($this->getType() == self::TYPE_PERSON){
      $b = true;
    }
    
    return $b;
  }

  /**
   * Get updateTime
   * 
   * @return int 
   */
  public function getUpdateTime()
  {
    $seconds = time() - $this->getUpdatedAt('U');
    $days = floor($seconds/(60 * 60 * 24));
    
    return $days;
  }
  
  /**
   * Count credits current
   * 
   * @return int 
   */
  public function countCreditsCurrent()
  {
    $criteria = new Criteria();
    $criteria->add(CreditPeer::STATUS, Credit::STATUS_CURRENT, Criteria::EQUAL);
    
    return $this->countCredits($criteria);
  }
  
  /**
   *
   * @return array 
   */
  public function getCreditsCurrent()
  {
    $criteria = new Criteria();
    $criteria->add(CreditPeer::STATUS, Credit::STATUS_CURRENT, Criteria::EQUAL);
    
    return $this->getCredits($criteria);
  }
  
  /**
   * Count investments current
   * 
   * @return int 
   */
  public function countInvestmentsCurrent()
  {  
    $criteria = new Criteria();
    $criteria->add(InvestmentPeer::IS_CURRENT, true, Criteria::EQUAL);
    
    return $this->countInvestments($criteria);
  }
  
  /**
   *
   * @return decimal
   */
  public function getMonthlyLiquid()
  {
    return round($this->getMonthlyIncome() - $this->getMonthlyExpenditure(), 2);
  }

    /**
   * Method toString
   * 
   * @return type 
   */
  public function  __toString() 
  {
    return $this->getNumber().' / '.$this->getName();
  }
} // Associate
