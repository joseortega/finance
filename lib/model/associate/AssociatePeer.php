<?php


/**
 * Skeleton subclass for performing query and update operations on the 'associate' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Feb 16 06:30:46 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.associate
 */
class AssociatePeer extends BaseAssociatePeer 
{
  /**
   * Options relationship status
   * 
   * @var array 
   */
  public static  $relationship_status = array(
      'single'=>'Single',
      'married'=>'Married',
      'in_a_relationship'=>'In a relationship',
      'engaged'=>'Engaged',
      'in_a_open_relationship'=>'In a open relationship',
      'widowed'=>'Widowed', 
      'separated'=>'Separated',
      'divorced'=>'Divorced'
  );

  /**
   * Options gender
   * 
   * @var array 
   */
  public static $gender = array(
      'Male'=>'Male',
      'Female'=>'Female'
  );
  
  /**
   * Retrieve for select
   * 
   * @param string $q 
   * @param int $limit
   * @return array object(Associates) 
   */
  static public function retrieveForSelect($q, $limit)
  {   
    $criteria = new Criteria();
    $c1 = $criteria->getNewCriterion(self::NAME, '%'.$q.'%', Criteria::LIKE);
    $c2 = $criteria->getNewCriterion(self::NUMBER, '%'.$q.'%', Criteria::LIKE);
    $c1->addOr($c2);
    $criteria->add($c1);
    $criteria->addAscendingOrderByColumn(self::NAME);
    $criteria->setLimit($limit);
 
    $associates = array();
    foreach (self::doSelect($criteria) as $associate)
    {
      $associates[$associate->getId()] = (string) $associate;
    }
 
    return $associates;
  }
  
  /**
   * Retrieve for select
   * 
   * @param string $q 
   * @param int $limit
   * @return array object(Associates) 
   */
  static public function retrieveForSelect2($q, $limit)
  {
    $criteria = new Criteria();

    $c1 = $criteria->getNewCriterion(self::NAME, '%'.$q.'%', Criteria::LIKE);
    $c2 = $criteria->getNewCriterion(self::NUMBER, '%'.$q.'%', Criteria::LIKE);
    $c3 = $criteria->getNewCriterion(self::IDENTIFICATION, '%'.$q.'%', Criteria::LIKE);
    $c1->addOr($c2);
    $c1->addOr($c3);
    $criteria->add($c1);
    $criteria->addAscendingOrderByColumn(self::NAME);
    $criteria->setLimit($limit);
 
    return self::doSelectJoinCategory($criteria);
  }

  /**
   * Return the max value
   * 
   * @param string $column
   * @param Criteria $criteria
   * @return int 
   */
  public static function max($column, Criteria $criteria = null)
  {
    if($criteria == null){
      $criteria = new Criteria();
    }
    
    $criteria->clearSelectColumns()->addSelectColumn('MAX(' . $column . ')');
    
    $stmt = self::doSelectStmt($criteria);

    $row = $stmt->fetch(PDO::FETCH_NUM);
    $max= (int) $row[0];
    
    return $max;
  }
  
  /**
   * Generate account namber
   * 
   * @return int  
   */
  public static function generateNumber($con = null)
  {
    if($con == null){
        $con = Propel::getConnection(AssociatePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
    }
    
    $con->beginTransaction();
    
    try {
        
        $max = self::max(self::NUMBER);

        if(!$max){
            $max = sfConfig::get('app_associate_number_offset');
        }

        $number = $max+1;
        
        $con->commit();
        
    }  catch (Exception $e){
        
        $con->rollBack();  
    }
    
    
    return $number;
  }
  
  /**
   * Get lucene index
   * 
   * @return type 
   */
  public static function getLuceneIndex()
  {
    ProjectConfiguration::registerZend();

    if (file_exists($index = self::getLuceneIndexFile())){
      return Zend_Search_Lucene::open($index);
    }else{
      return Zend_Search_Lucene::create($index);
    }
  }
  
  /**
   * Get lucene index file
   * 
   * @return type 
   */
  public static function getLuceneIndexFile()
  {
    return sfConfig::get('sf_data_dir').'/associate.index';
  }
  
  /**
   * Do delete all associates
   * 
   * @param type $con
   * @return type 
   */
  public static function doDeleteAll($con = null)
  {
    if (file_exists($index = self::getLuceneIndexFile())){
      
      sfToolkit::clearDirectory($index);
      rmdir($index);
    }

    return parent::doDeleteAll($con);
  }
  
  /**
   * Get for lucene query
   * 
   * @param type $query
   * @return type 
   */
  public static function getForLuceneQuery($query, $limit)
  {
    $hits = self::getLuceneIndex()->find($query);

    $pks = array();
    foreach ($hits as $hit)
    {
      $pks[] = $hit->pk;
    }

    $criteria = new Criteria();
    $criteria->add(self::ID, $pks, Criteria::IN);
    $criteria->addAscendingOrderByColumn(AssociatePeer::NAME);
    $criteria->setLimit($limit);

    return self::doSelect($criteria);
  }
} // AssociatePeer
